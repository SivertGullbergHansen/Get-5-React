openapi: 3.0.0
info:
  title: G5API
  version: 2.0.2.4
paths:
  resourcePath:
    '0': /
    '1': v
    '2': e
    '3': t
    '4': o
    '5': s
    '6': i
    '7': d
    '8': e
    '9': s
    '10': r
    '11': d
    '12': e
    '13': x
    '14': t
    '15': r
    '16': a
    '17': s
  description:
    '0': E
    '1': x
    '2': p
    '3': r
    '4': e
    '5': s
    '6': s
    '7': ' '
    '8': A
    '9': P
    '10': I
    '11': ' '
    '12': r
    '13': o
    '14': u
    '15': t
    '16': e
    '17': r
    '18': ' '
    '19': f
    '20': o
    '21': r
    '22': ' '
    '23': v
    '24': e
    '25': t
    '26': o
    '27': ' '
    '28': s
    '29': i
    '30': d
    '31': e
    '32': s
    '33': ' '
    '34': i
    '35': 'n'
    '36': ' '
    '37': g
    '38': e
    '39': t
    '40': '5'
    '41': .
    '42': e
    '43': s
    '44': .
    '45': t
    '46': '5'
    '47': ' '
    '48': m
    '49': a
    '50': t
    '51': c
    '52': h
    '53': e
    '54': s
    '55': .
  /leaderboard/:
    get:
      description: Get lifetime leaderboard of teams
      produces:
        - application/json
      tags:
        - leaderboard
      responses:
        '200':
          description: Leaderboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '500':
          $ref: '#/components/responses/Error'
  /leaderboard/players:
    get:
      description: Get lifetime leaderboard for players
      produces:
        - application/json
      tags:
        - leaderboard
      responses:
        '200':
          description: Leaderboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '500':
          $ref: '#/components/responses/Error'
  /leaderboard/players/pug:
    get:
      description: Get lifetime leaderboard for players in pickup games.
      produces:
        - application/json
      tags:
        - leaderboard
      responses:
        '200':
          description: Leaderboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '500':
          $ref: '#/components/responses/Error'
  /leaderboard/players/:season_id:
    get:
      description: Seasonal leaderboard for players
      produces:
        - application/json
      parameters:
        - name: season_id
          required: true
          schema:
            type: string
      tags:
        - leaderboard
      responses:
        '200':
          description: Leaderboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '500':
          $ref: '#/components/responses/Error'
  /leaderboard/:season_id:
    get:
      description: Seasonal leaderboard for teams
      produces:
        - application/json
      tags:
        - leaderboard
      parameters:
        - name: season_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Leaderboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '500':
          $ref: '#/components/responses/Error'
  /match/:match_id/finish:
    post:
      description: Finalizes the match. Called from the G5WS plugin.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: integer
                  description: The API key given from the game server to compare.
                winner:
                  type: string
                  description: The string for which team won the match. team1 or team2.
                forfeit:
                  type: integer
                  description: Optional if a team has forfeit a match.
                match_id:
                  type: integer
                  description: The given match ID from the path.
      tags:
        - legacy
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/Error'
  /match/:match_id/pause:
    post:
      description: Updates the database value if a match is paused from in-game.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: integer
                  description: The API key given from the game server to compare.
                pause_type:
                  type: string
                  description: The string for what type of pause has been fired off.
                team_paused:
                  type: string
                  description: Which team has paused the game.
                match_id:
                  type: integer
                  description: The given match ID from the path.
      tags:
        - legacy
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/Error'
  /match/:match_id/unpause:
    post:
      description: Updates the database value if a match is unpaused from in-game.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: integer
                  description: The API key given from the game server to compare.
                team_unpaused:
                  type: string
                  description: Which team has unpaused the game.
                match_id:
                  type: integer
                  description: The given match ID from the path.
      tags:
        - legacy
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/Error'
  /match/:match_id/map/:map_number/start:
    post:
      description: Begin a map within a match series.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: integer
                  description: The API key given from the game server to compare.
                map_number:
                  type: integer
                  description: The given map number to start.
                mapname:
                  type: string
                  description: The given map name to update in the map stats object.
                match_id:
                  type: integer
                  description: The given match ID from the path.
      tags:
        - legacy
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/Error'
  /match/:match_id/map/:map_number/update:
    post:
      description: Update a match with the score.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: integer
                  description: The API key given from the game server to compare.
                team1_score:
                  type: integer
                  description: The score for team1.
                team2_score:
                  type: integer
                  description: The score for team2.
                match_id:
                  type: integer
                  description: The given match ID from the path.
                map_number:
                  type: integer
                  description: The given map number from the URI path.
      tags:
        - legacy
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/Error'
  /match/:match_id/vetoUpdate:
    post:
      description: Route serving to update the vetos in the database.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: integer
                  description: The API key given from the game server to compare.
                teamString:
                  type: string
                  description: >-
                    The team string consisting of either team1, team2, or
                    nothing.
                map:
                  type: string
                  description: The map the team has picked or banned.
                match_id:
                  type: integer
                  description: The given match ID from the path.
                pick_or_veto:
                  type: string
                  description: The action taken upon the team.
      tags:
        - legacy
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/Error'
  /match/:match_id/vetoSideUpdate:
    post:
      description: >-
        Route serving to update the side selection from vetoes into the
        database.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: integer
                  description: The API key given from the game server to compare.
                teamString:
                  type: string
                  description: >-
                    The team string consisting of either team1, team2, or
                    nothing.
                map:
                  type: string
                  description: The map the team has picked or banned.
                match_id:
                  type: integer
                  description: The given match ID from the path.
                side:
                  type: string
                  description: Which side the team has chosen.
      tags:
        - legacy
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/Error'
  /:match_id/map/:map_number/demo:
    post:
      description: Route serving to update the demo link per map.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: integer
                  description: The API key given from the game server to compare.
                map_number:
                  type: integer
                  description: The map id of a given match.
                demoFile:
                  type: string
                  description: The URL for a demo file in string form.
                match_id:
                  type: integer
                  description: The given match ID from the path.
      tags:
        - legacy
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /:match_id/map/:map_number/demo/upload/:
    put:
      description: Route serving to upload the demo file from the game server.
      parameters:
        - in: path
          name: match_id
          schema:
            type: integer
          required: true
        - in: path
          name: map_number
          schema:
            type: integer
          required: true
        - in: header
          name: key
          schema:
            type: string
          required: true
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: object
              properties:
                key:
                  demoFile:
                    type: file
                    description: Demo file in octet stream form.
      tags:
        - legacy
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /match/:match_id/map/:map_number/finish:
    post:
      description: Route serving to finish a map within a series.
      produces:
        - text/plain
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: The API key given from the game server to compare.
                winner:
                  type: string
                  description: >-
                    The string representation of the winner, usually team1 or
                    team2.
                map_number:
                  type: integer
                  description: The map id of a given match.
                match_id:
                  type: integer
                  description: The given match ID from the path.
      tags:
        - legacy
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/Error'
  /match/:match_id/map/:map_number/player/:steam_id/update:
    post:
      description: Route serving to update a players stats within a match.
      produces:
        - text/plain
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/PlayerStats'
      tags:
        - legacy
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/Error'
  /:match_id/map/:map_number/backup:
    post:
      description: Route serving to upload the latest round backup to the server.
      parameters:
        - in: path
          name: match_id
          schema:
            type: integer
          required: true
        - in: path
          name: map_number
          schema:
            type: integer
          required: true
        - in: header
          name: key
          schema:
            type: string
          required: true
        - in: path
          name: round_number
          schema:
            type: integer
          required: true
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: object
              properties:
                key:
                  backupFile:
                    type: file
                    description: The latest backup cfg file from the game server.
      tags:
        - legacy
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /maps/:
    get:
      description: Get all maps from all users.
      produces:
        - application/json
      tags:
        - maps
      responses:
        '200':
          description: List of maps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Maps'
        '500':
          $ref: '#/components/responses/Error'
  /maps/:user_id:
    get:
      description: Get the maplist of a specific user
      produces:
        - application/json
      parameters:
        - name: user_id
          description: The database or steam ID of the user
          required: true
          schema:
            type: integer
      tags:
        - maps
      responses:
        '200':
          description: Get a maplist of a specific user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Maps'
        '500':
          $ref: '#/components/responses/Error'
  /maps/:user_id/enabled:
    get:
      description: Get the maplist of a specific user that are enabled.
      produces:
        - application/json
      parameters:
        - name: user_id
          description: The database or steam ID of the user
          required: true
          schema:
            type: integer
      tags:
        - maps
      responses:
        '200':
          description: Get enabled maps for a user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Maps'
        '500':
          $ref: '#/components/responses/Error'
  /maps:
    post:
      description: Create map for maplist
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMap'
      tags:
        - maps
      responses:
        '200':
          description: Create successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
    put:
      description: Update a map in the map_list
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMap'
      tags:
        - maps
      responses:
        '200':
          description: Map update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '412':
          description: Nothing to update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      description: Delete a map in the map_list
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMap'
      tags:
        - maps
      responses:
        '200':
          description: Map update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '412':
          description: Nothing to update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '500':
          $ref: '#/components/responses/Error'
  /mapstats/:
    get:
      description: Stats for all maps in all matches.
      produces:
        - application/json
      tags:
        - mapstats
      responses:
        '200':
          description: Stats for all maps in all matches.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MapStatsData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /mapstats/:match_id:
    get:
      description: Set of map stats from a match
      produces:
        - application/json
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - mapstats
      responses:
        '200':
          description: Stats for all maps in all matches.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MapStatsData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /mapstats/:match_id/stream:
    get:
      description: >-
        Set of map stats from a match provided as an event-stream for real time
        updates.
      produces:
        - text/event-stream
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - mapstats
      responses:
        '200':
          description: Stats for all maps in all matches.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MapStatsData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /mapstats/:match_id/:map_number/stream:
    get:
      description: >-
        Map statistics for a given match and map number provided as a
        text/event-stream for real time data info.
      produces:
        - application/json
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
        - name: map_number
          required: true
          schema:
            type: integer
      tags:
        - mapstats
      responses:
        '200':
          description: Stats for a single given map in a match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MapStatsData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /mapstats/:match_id/:map_number:
    get:
      description: Map statistics for a given match and map number.
      produces:
        - application/json
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
        - name: map_number
          required: true
          schema:
            type: integer
      tags:
        - mapstats
      responses:
        '200':
          description: Stats for a single given map in a match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MapStatsData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /mapstats:
    post:
      description: Add map stats for a match
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MapStatsData'
      tags:
        - mapstats
      responses:
        '200':
          description: Map stats inserted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/MatchAlreadyFinished'
        '500':
          $ref: '#/components/responses/Error'
    put:
      description: Update a map stats object when it is completed
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MapStatsData'
      tags:
        - mapstats
      responses:
        '200':
          description: Map stats updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoMapStatData'
        '422':
          $ref: '#/components/responses/MatchAlreadyFinished'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      description: Delete a map stats object
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                map_stats_id:
                  type: integer
      tags:
        - mapstats
      responses:
        '200':
          description: Mapstat deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoMapStatData'
        '422':
          $ref: '#/components/responses/MatchAlreadyFinished'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:
    get:
      description: Get all match data from the application.
      produces:
        - application/json
      parameters:
        - in: query
          name: asc
          description: Whether to have values in descending order. Defaults to true.
          required: false
          schema:
            type: boolean
            default: true
      tags:
        - matches
      responses:
        '200':
          description: All matches within the system.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/mymatches:
    get:
      description: Set of matches from the logged in user.
      produces:
        - application/json
      parameters:
        - in: query
          name: asc
          description: Whether to have values in descending order. Defaults to true.
          required: false
          schema:
            type: boolean
            default: true
      tags:
        - matches
      responses:
        '200':
          description: Matches of logged in user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchData'
        '404':
          $ref: '#/components/responses/MatchesNotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id:
    get:
      description: Returns a provided matches info.
      produces:
        - application/json
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - matches
      responses:
        '200':
          description: Match info
          content:
            application/json:
              schema:
                type: object
                properties:
                  match:
                    $ref: '#/components/schemas/MatchData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id/stream:
    get:
      description: Returns an event stream of a specified matches info.
      produces:
        - text/event-stream
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - matches
      responses:
        '200':
          description: Match info
          content:
            application/json:
              schema:
                type: object
                properties:
                  match:
                    $ref: '#/components/schemas/MatchData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id/paused/stream:
    get:
      description: Get the pause information on a match streamed as a server sent event.
      produces:
        - text/event-stream
      tags:
        - matches
      responses:
        '200':
          description: Returns information based on a match if it is paused.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchPauseObject'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id/paused:
    get:
      description: Get the pause information on a match.
      produces:
        - application/json
      tags:
        - matches
      responses:
        '200':
          description: Returns information based on a match if it is paused.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchPauseObject'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id/bombs/stream:
    get:
      description: Returns an bomb plant/defused event stream of a specified match.
      produces:
        - text/event-stream
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - matches
      responses:
        '200':
          description: Bomb Info from the match.
          content:
            application/json:
              schema:
                type: object
                properties:
                  match:
                    $ref: '#/components/schemas/BombInfo'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id/bombs:
    get:
      description: Returns an bomb plant/defused data of a specified match.
      produces:
        - text/event-stream
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - matches
      responses:
        '200':
          description: Bomb Info from the match.
          content:
            application/json:
              schema:
                type: object
                properties:
                  match:
                    $ref: '#/components/schemas/BombInfo'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/limit/:limiter:
    get:
      description: Returns most recent matches specified by a limit.
      produces:
        - application/json
      parameters:
        - name: limiter
          required: true
          schema:
            type: integer
      tags:
        - matches
      responses:
        '200':
          description: Match info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchData'
        '500':
          $ref: '#/components/responses/Error'
  /matches/limit/:firstvalue&:lastvalue:
    get:
      description: Returns a subset of matches between a range.
      produces:
        - application/json
      parameters:
        - name: firstvalue
          required: true
          schema:
            type: integer
        - name: lastvalue
          required: true
          schema:
            type: integer
      tags:
        - matches
      responses:
        '200':
          description: Match info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchData'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id:/config:
    get:
      description: Route serving to get match configs from the database for the plugin.
      produces:
        - application/json
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - matches
      responses:
        '200':
          description: Match config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchConfig'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches:
    post:
      description: Create a new match.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/NewMatch'
      tags:
        - matches
      responses:
        '200':
          description: Create successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Error'
    put:
      description: Update player stats in a match/map.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/NewMatch'
      tags:
        - matches
      responses:
        '200':
          description: Update successful.
          content:
            application/json:
              type: object
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoMatchData'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      description: Delete a match and all values associated if it is cancelled.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                match_id:
                  type: integer
                all_cancelled:
                  type: boolean
      tags:
        - matches
      responses:
        '200':
          description: Match deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id/forfeit/:winner_id:
    get:
      description: >-
        Forfeits a current match with a given team ID as the winner, if the
        match is running.
      parameters:
        - in: path
          name: winner_id
          schema:
            type: integer
          required: true
        - in: path
          name: match_id
          schema:
            type: integer
          required: true
      produces:
        - application/json
      tags:
        - matches
      responses:
        '200':
          description: Match information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/MatchInvalidData'
  /matches/:match_id/cancel:
    get:
      description: >-
        Cancels the given match, provided it isn't finished and the user has the
        ability to do so. The user must either own the match or be an admin.
      produces:
        - application/json
      parameters:
        - name: match_id
          description: The current matches identification number.
          schema:
            type: integer
      tags:
        - matches
      responses:
        '200':
          description: Match response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /matches/:match_id/restart:
    get:
      description: >-
        Restarts the given match, provided it isn't finished and the user has
        the ability to do so. The user must either own the match or be an admin.
      produces:
        - application/json
      parameters:
        - name: match_id
          description: The current matches identification number.
          schema:
            type: integer
      tags:
        - matches
      responses:
        '200':
          description: Match response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /matches/:match_id/rcon:
    put:
      description: >-
        Sends out an RCON Command to the server, and returns the response if
        retrieved. Super admins can only use this, as you can retrieve RCON
        Passwords using this.
      produces:
        - application/json
      parameters:
        - name: match_id
          description: The current matches identification number.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rcon_command:
                  type: string
                  description: The rcon command that the user has sent in.
      tags:
        - matches
      responses:
        '200':
          description: Match response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id/pause:
    get:
      description: Sends the sm_pause command to a given match.
      produces:
        - application/json
      parameters:
        - name: match_id
          description: The current matches identification number.
          schema:
            type: integer
      tags:
        - matches
      responses:
        '200':
          description: Match response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /matches/:match_id/unpause:
    get:
      description: Sends the sm_unpause command to a given match.
      produces:
        - application/json
      parameters:
        - name: match_id
          description: The current matches identification number.
          schema:
            type: integer
      tags:
        - matches
      responses:
        '200':
          description: Match response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /matches/:match_id/adduser:
    put:
      description: Sends an add user commamd to a given team.
      produces:
        - application/json
      parameters:
        - name: match_id
          description: The current matches identification number.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                steam_id:
                  type: string
                  description: >-
                    The formatted Steam ID of a user. Can be url, steam64, ID3,
                    vanity URL.
                team_id:
                  type: string
                  description: >-
                    Either the first or second team in the match, team1 or
                    team2.
                nickname:
                  type: string
                  description: Optional nickname for the user being added into the match.
                  required: false
      tags:
        - matches
      responses:
        '200':
          description: Match response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id/addcoach:
    put:
      description: Sends an add coach commamd to a given team.
      produces:
        - application/json
      parameters:
        - name: match_id
          description: The current matches identification number.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                steam_id:
                  type: string
                  description: >-
                    The formatted Steam ID of a user. Can be url, steam64, ID3,
                    vanity URL.
                team_id:
                  type: string
                  description: >-
                    Either the first or second team in the match, team1 or
                    team2.
      tags:
        - matches
      responses:
        '200':
          description: Match response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id/addspec:
    put:
      description: Sends an add player to spectator command.
      produces:
        - application/json
      parameters:
        - name: match_id
          description: The current matches identification number.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: >-
                    The formatted Steam ID of a user. Can be url, steam64, ID3,
                    vanity URL.
      tags:
        - matches
      responses:
        '200':
          description: Match response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id/removeuser:
    put:
      description: >-
        Sends a get5_removeplayer command to the game server with a given steam
        ID.
      produces:
        - application/json
      parameters:
        - name: match_id
          description: The current matches identification number.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                steam_id:
                  type: string
                  description: >-
                    The formatted Steam ID of a user. Can be url, steam64, ID3,
                    vanity URL.
      tags:
        - matches
      responses:
        '200':
          description: Match response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id/backup:
    get:
      description: Retrieves the name of backups on the game server.
      produces:
        - application/json
      parameters:
        - name: match_id
          description: The current matches identification number.
          schema:
            type: integer
      tags:
        - matches
      responses:
        '200':
          description: Match response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      description: Runs a backup file on the game server.
      produces:
        - application/json
      parameters:
        - name: match_id
          description: The current matches identification number.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                backup_name:
                  type: string
                  description: Filename of the backup located on the game server.
      tags:
        - matches
      responses:
        '200':
          description: Match response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/MatchInvalidData'
        '500':
          $ref: '#/components/responses/Error'
  /matches/:match_id/backup/remote:
    post:
      description: >-
        Runs a backup stored on the API remotely to a specified game server,
        provided it is available.
      produces:
        - application/json
      parameters:
        - name: match_id
          description: The current matches identification number.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                server_id:
                  type: integer
                  description: The ID of the server that you wish to restore to.
                backup_file:
                  type: string
                  description: >-
                    The name of the backup file. This can be retrieved via a
                    GET.
      tags:
        - matches
      responses:
        '200':
          description: Match response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/MatchInvalidData'
        '500':
          $ref: '#/components/responses/Error'
    get:
      description: Retrieves the name of backups available for a match on the API.
      produces:
        - application/json
      parameters:
        - name: match_id
          description: The current matches identification number.
          schema:
            type: integer
      tags:
        - matches
      responses:
        '200':
          description: Match response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '401':
          $ref: '#/components/responses/MatchFinished'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /playerstatsextra/extra:
    get:
      description: Route serving to get all extra player statistics.
      produces:
        - application/json
      tags:
        - playerstats
      responses:
        '200':
          description: Extra Player Stats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStatsExtras'
        '400':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstatsextra/:steam_id:
    get:
      description: Player stats from a given Steam ID.
      produces:
        - application/json
      parameters:
        - name: steam_id
          required: true
          schema:
            type: string
      tags:
        - playerstats
      responses:
        '200':
          description: Player stats from a given user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStatsExtras'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstatsextra/:steam_id/pug:
    get:
      description: Extra player stats from a given Steam ID involved in PUGs
      produces:
        - application/json
      parameters:
        - name: steam_id
          required: true
          schema:
            type: string
      tags:
        - playerstats
      responses:
        '200':
          description: Player stats from a given user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStatsExtras'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstatsextra/:steam_id/official:
    get:
      description: Extra player stats from a given Steam ID involved in official matches.
      produces:
        - application/json
      parameters:
        - name: steam_id
          required: true
          schema:
            type: string
      tags:
        - playerstats
      responses:
        '200':
          description: Player stats from a given user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStatsExtras'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstatsextra/:steam_id/season/:season_id:
    get:
      description: Extra player stats from a given Steam ID involved in a speciefic season.
      produces:
        - application/json
      parameters:
        - name: steam_id
          required: true
          schema:
            type: string
        - name: season_id
          required: true
          schema:
            type: string
      tags:
        - playerstats
      responses:
        '200':
          description: Player stats from a given user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStatsExtras'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstatsextras/match/:match_id:
    get:
      description: Extra player stats from a given match in the system.
      produces:
        - application/json
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - playerstats
      responses:
        '200':
          description: Player stats from a given match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStatsExtra'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstatsextras/match/:match_id/stream:
    get:
      description: >-
        Extra player stats from a given match in the system represented by a
        text-stream for real time updates.
      produces:
        - text/event-stream
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - playerstats
      responses:
        '200':
          description: Player stats from a given match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStatsExtra'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstatsextras:
    post:
      description: Create extra player stats in a match/map.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerStatsExtra'
              api_key:
                type: string
                description: API key of the match being updated.
      tags:
        - playerstats
      responses:
        '200':
          description: Player Stats created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoPlayerStatData'
        '500':
          $ref: '#/components/responses/Error'
    put:
      description: Update additional player stats in a match/map.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerStatsExtra'
      tags:
        - playerstats
      responses:
        '200':
          description: Update successful.
          content:
            application/json:
              type: object
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoPlayerStatData'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      description: Delete all additional player stats object from a match.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                match_id:
                  type: integer
      tags:
        - playerstats
      responses:
        '200':
          description: Player stat deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoPlayerStatData'
        '500':
          $ref: '#/components/responses/Error'
  /playerstats/:
    get:
      description: Route serving to get all player statistics.
      produces:
        - application/json
      tags:
        - playerstats
      responses:
        '200':
          description: Player Stats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStats'
        '400':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstats/unique:
    get:
      description: Gets a unique player count from the map stats table.
      produces:
        - application/json
      tags:
        - playerstats
      responses:
        '200':
          description: Player stats from a given user.
          content:
            application/json:
              schema:
                type: integer
                description: Unique count of players who have played matches.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstats/:steam_id:
    get:
      description: Player stats from a given Steam ID.
      produces:
        - application/json
      parameters:
        - name: steam_id
          required: true
          schema:
            type: string
      tags:
        - playerstats
      responses:
        '200':
          description: Player stats from a given user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStats'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstats/:steam_id/pug:
    get:
      description: Player stats from a given Steam ID involved in PUGs
      produces:
        - application/json
      parameters:
        - name: steam_id
          required: true
          schema:
            type: string
      tags:
        - playerstats
      responses:
        '200':
          description: Player stats from a given user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStats'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstats/:steam_id/official:
    get:
      description: Player stats from a given Steam ID involved in official matches.
      produces:
        - application/json
      parameters:
        - name: steam_id
          required: true
          schema:
            type: string
      tags:
        - playerstats
      responses:
        '200':
          description: Player stats from a given user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStats'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstats/:steam_id/season/:season_id:
    get:
      description: Player stats from a given Steam ID involved in a speciefic season.
      produces:
        - application/json
      parameters:
        - name: steam_id
          required: true
          schema:
            type: string
        - name: season_id
          required: true
          schema:
            type: string
      tags:
        - playerstats
      responses:
        '200':
          description: Player stats from a given user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStats'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstats/match/:match_id:
    get:
      description: Player stats from a given match in the system.
      produces:
        - application/json
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - playerstats
      responses:
        '200':
          description: Player stats from a given match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStats'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstats/match/:match_id/stream:
    get:
      description: >-
        Player stats from a given match in the system represented by a
        text-stream for real time updates.
      produces:
        - text/event-stream
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - playerstats
      responses:
        '200':
          description: Player stats from a given match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStats'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /playerstats/:steam_id/recent:
    get:
      description: Get a steam ID's recent matches
      produces:
        - application/json
      parameters:
        - name: steam_id
          description: The steam ID of the user
          required: true
          schema:
            type: integer
      tags:
        - playerstats
      responses:
        '200':
          description: Last five matches from the steam ID provided.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchData'
        '500':
          $ref: '#/components/responses/Error'
  /playerstats:
    post:
      description: Create player stats in a match/map.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerStats'
              api_key:
                type: string
                description: API key of the match being updated.
      tags:
        - playerstats
      responses:
        '200':
          description: Player Stats created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoPlayerStatData'
        '500':
          $ref: '#/components/responses/Error'
    put:
      description: Update player stats in a match/map.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerStats'
      tags:
        - playerstats
      responses:
        '200':
          description: Update successful.
          content:
            application/json:
              type: object
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoPlayerStatData'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      description: Delete all player stats object from a match.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                match_id:
                  type: integer
      tags:
        - playerstats
      responses:
        '200':
          description: Player stat deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoPlayerStatData'
        '500':
          $ref: '#/components/responses/Error'
  /seasons/:
    get:
      description: Get all seasons from the application.
      produces:
        - application/json
      tags:
        - seasons
      responses:
        '200':
          description: All seasons within the system.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SeasonData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /seasons/myseasons:
    get:
      description: Set of seasons from the logged in user.
      produces:
        - application/json
      tags:
        - seasons
      responses:
        '200':
          description: All matches within the system.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SeasonData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /seasons/myseasons/availble:
    get:
      description: Set of seasons from the logged in user that can currently be used.
      produces:
        - application/json
      tags:
        - seasons
      responses:
        '200':
          description: All seasons of a user that are still running.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SeasonData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /seasons/:season_id/cvar:
    get:
      description: Get the default CVARs of a given season ID.
      produces:
        - application/json
      parameters:
        - name: season_id
          required: true
          schema:
            type: integer
      tags:
        - seasons
      responses:
        '200':
          description: All matches within the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cvars'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /seasons/:season_id:
    get:
      description: Set of matches from a season.
      produces:
        - application/json
      parameters:
        - name: season_id
          required: true
          schema:
            type: integer
      tags:
        - seasons
      responses:
        '200':
          description: Season stats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /seasons:
    post:
      description: Create a new season.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SeasonData'
      tags:
        - seasons
      responses:
        '200':
          description: New season inserted successsfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Error'
    put:
      description: Update a season.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SeasonData'
      tags:
        - seasons
      responses:
        '200':
          description: New season inserted successsfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoSeasonData'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      description: Delete a season object. NULLs any linked matches to the season as well.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                season_id:
                  type: integer
                  required: true
      tags:
        - seasons
      responses:
        '200':
          description: Season deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /seasons/challonge:
    post:
      description: Create a new season from a Challonge Tournament.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  tournament_id:
                    type: string
                    description: >-
                      The tournament ID or URL of the Challonge tournament, as
                      explained in their
                      [API](https://api.challonge.com/v1/documents/tournaments/show).
                  import_teams:
                    type: boolean
                    description: >-
                      Whether or not to import the teams that are already in the
                      bracket.
      tags:
        - seasons
      responses:
        '200':
          description: New season inserted successsfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Error'
  /servers/:
    get:
      description: Get all servers from the application. RCON passwords, too, if an admin.
      produces:
        - application/json
      tags:
        - servers
      responses:
        '200':
          description: All visible server information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServerData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /servers/publiccount:
    get:
      description: Get a count of all public servers available.
      produces:
        - application/json
      tags:
        - servers
      responses:
        '200':
          description: An integrer representing the amount of publically usable servers.
          content:
            application/json:
              schema:
                type: integer
                description: Count of all public servers.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /servers/available:
    get:
      description: Get all available servers depending on access level.
      produces:
        - application/json
      tags:
        - servers
      responses:
        '200':
          description: All visible server information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServerData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /servers/myservers:
    get:
      description: Set of servers from the logged in user.
      produces:
        - application/json
      tags:
        - servers
      responses:
        '200':
          description: Server information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServerData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /servers/:server_id:
    get:
      description: Returns a provided server info.
      produces:
        - application/json
      parameters:
        - name: server_id
          required: true
          schema:
            type: integer
      tags:
        - servers
      responses:
        '200':
          description: Specific server information
          content:
            application/json:
              schema:
                type: object
                properties:
                  server:
                    $ref: '#/components/schemas/ServerData'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /servers/:server_id:/status:
    get:
      description: Returns a provided server status.
      produces:
        - application/json
      parameters:
        - name: server_id
          required: true
          schema:
            type: integer
      tags:
        - servers
      responses:
        '200':
          description: Server info, if available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /servers:
    post:
      description: Creates a new server to use.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ServerData'
      tags:
        - servers
      responses:
        '200':
          description: Server created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Error'
    put:
      description: Updates an existing server.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ServerData'
      tags:
        - servers
      responses:
        '200':
          description: Server updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoServerData'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      description: Delete a server object.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                server_id:
                  type: integer
                  required: true
      tags:
        - servers
      responses:
        '200':
          description: Server deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /teams/:
    get:
      description: Get all teams registered on get5.
      produces:
        - application/json
      tags:
        - teams
      responses:
        '200':
          description: All teams within the system.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /teams/myteams:
    get:
      description: Set of teams from the logged in user.
      produces:
        - application/json
      tags:
        - teams
      responses:
        '200':
          description: Set of teams from the logged in user within the system.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /teams/:team_id:
    get:
      description: Returns a provided teams info.
      produces:
        - application/json
      parameters:
        - name: team_id
          required: true
          schema:
            type: integer
      tags:
        - teams
      responses:
        '200':
          description: Team info
          content:
            application/json:
              schema:
                type: object
                properties:
                  team:
                    $ref: '#/components/schemas/TeamData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /teams/:team_id/basic:
    get:
      description: >-
        Returns a provided teams top-level info, no team names/steamid
        returned..
      produces:
        - application/json
      parameters:
        - name: team_id
          required: true
          schema:
            type: integer
      tags:
        - teams
      responses:
        '200':
          description: Team info
          content:
            application/json:
              schema:
                type: object
                properties:
                  team:
                    $ref: '#/components/schemas/TeamData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /teams:
    post:
      description: Creates a new team to use.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TeamData'
      tags:
        - teams
      responses:
        '200':
          description: Team created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '500':
          $ref: '#/components/responses/Error'
    put:
      description: Creates a new team to use.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TeamData'
      tags:
        - teams
      responses:
        '200':
          description: Team updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoTeamData'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      description: >-
        Delete a team object if there is no map stats associated with it.
        Optionally deletes a team member from a team, if a steam ID is provided.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
                  required: true
                steam_id:
                  type: string
                  required: false
      tags:
        - teams
      responses:
        '200':
          description: Team deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /teams/:team_id/recent:
    get:
      description: Returns last five recent matches by the team.
      produces:
        - application/json
      parameters:
        - name: team_id
          required: true
          schema:
            type: integer
      tags:
        - teams
      responses:
        '200':
          description: Last five matches from the team.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /teams/:team_id/result/:match_id:
    get:
      description: Get the string result of a match that the team played.
      produces:
        - application/json
      parameters:
        - name: team_id
          required: true
          schema:
            type: integer
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - teams
      responses:
        '200':
          description: String representation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: Whether a team won, lost, or tied.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /teams/challonge:
    post:
      description: Bulk create blank teams from a Challonge bracket.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  tournament_id:
                    type: string
                    description: >-
                      The tournament ID or URL of the Challonge tournament, as
                      explained in their
                      [API](https://api.challonge.com/v1/documents/participants/index).
      tags:
        - teams
      responses:
        '200':
          description: Teams created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '500':
          $ref: '#/components/responses/Error'
  /users/:
    get:
      description: Get all users
      produces:
        - application/json
      tags:
        - users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewUser'
        '500':
          $ref: '#/components/responses/Error'
  /users/:user_id:
    get:
      description: Get specific user
      produces:
        - application/json
      parameters:
        - name: user_id
          description: The database or steam ID of the user
          required: true
          schema:
            type: integer
      tags:
        - users
      responses:
        '200':
          description: Get a specific user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/NewUser'
        '500':
          $ref: '#/components/responses/Error'
  /users:
    post:
      description: Create user
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      tags:
        - users
      responses:
        '200':
          description: Create successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Error'
    put:
      description: Update a user
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      tags:
        - users
      responses:
        '200':
          description: User update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '412':
          description: Nothing to update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '500':
          $ref: '#/components/responses/Error'
  /users/:user_id/steam:
    get:
      description: get a users' steam URL
      produces:
        - application/json
      parameters:
        - name: user_id
          description: The database or steam ID of the user
          required: true
          schema:
            type: integer
      tags:
        - users
      responses:
        '200':
          description: Update successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
        '500':
          $ref: '#/components/responses/Error'
  /users/:user_id/recent:
    get:
      description: Get a users' recent matches
      produces:
        - application/json
      parameters:
        - name: user_id
          description: The database or steam ID of the user
          required: true
          schema:
            type: integer
      tags:
        - users
      responses:
        '200':
          description: Last five matches from the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchData'
        '500':
          $ref: '#/components/responses/Error'
  /v2:
    post:
      description: >-
        Retrieves all logged calls from the game server and operates on them as
        needed, based on the event. Please see [events and
        forwards](http://splewis.github.io/get5/latest/events.html#tag/All-Events/paths/Get_OnEvent/post)
        From the get5 documentation to see what data is required for each event.
        Typings can also be found in the repository.
      produces:
        - application/json
      tags:
        - v2
      responses:
        '200':
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/Error'
  /v2/backup:
    post:
      description: >-
        Retrieves the backups from the game servers and stores them in the
        application.
      produces:
        - application/json
      tags:
        - v2
      parameters:
        - in: header
          name: Get5-FileName
          description: Name of the backup file coming from the game server.
          schema:
            type: string
          required: true
        - in: header
          name: Get5-MapNumber
          description: Zero-indexed map number in the series.
          schema:
            type: string
          required: true
        - in: header
          name: Get5-RoundNumber
          description: >-
            Zero-indexed map number in the series, if the match is not live it
            is -1.
          schema:
            type: string
          required: true
        - in: header
          name: Authorization
          description: The API key provided by the server.
          schema:
            type: string
          required: true
        - in: header
          name: Get5-MatchId
          description: The ID of the match.
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /v2/demo:
    post:
      description: >-
        Retrieves the demos from the given match and map, zips and stores them
        on the server.
      produces:
        - application/json
      tags:
        - v2
      parameters:
        - in: header
          name: Get5-FileName
          description: Name of the file as defined by get5_demo_name_format
          schema:
            type: string
          required: true
        - in: header
          name: Get5-MapNumber
          description: Zero-indexed map number in the series.
          schema:
            type: string
          required: true
        - in: header
          name: Authorization
          description: The API key provided by the server.
          schema:
            type: string
          required: true
        - in: header
          name: Get5-MatchId
          description: The ID of the match.
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /vetoes/:
    get:
      description: Get all veto data from the application.
      produces:
        - application/json
      tags:
        - vetoes
      responses:
        '200':
          description: All match vetoes within the system.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VetoData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /vetoes/:match_id:
    get:
      description: Get all veto data from a specified match.
      produces:
        - application/json
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - vetoes
      responses:
        '200':
          description: All vetoes from a given match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VetoData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /vetoes/:match_id/stream:
    get:
      description: >-
        Get all veto pick/ban data from a specified match, via an emitter for
        real-time updates.
      produces:
        - text/event-stream
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - vetosides
      responses:
        '200':
          description: Veto data from a given match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VetoData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /vetoes:
    post:
      description: Insert a new veto for a match.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VetoData'
      tags:
        - vetoes
      responses:
        '200':
          description: Veto added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message.
                  id:
                    type: integer
                    description: The inserted veto.
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoVetoData'
        '500':
          $ref: '#/components/responses/Error'
    put:
      description: Updates an existing veto.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VetoData'
      tags:
        - vetoes
      responses:
        '200':
          description: Veto deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoVetoData'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      description: Deletes vetoes associated with a match.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                match_id:
                  type: integer
                  description: Match ID
                  required: true
      tags:
        - vetoes
      responses:
        '200':
          description: Veto deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoVetoData'
        '500':
          $ref: '#/components/responses/Error'
  /vetosides/:
    get:
      description: Get all veto side selection data from the application.
      produces:
        - application/json
      tags:
        - vetosides
      responses:
        '200':
          description: All match veto sides within the system.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VetoSideData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /vetosides/:match_id:
    get:
      description: Get all veto side selection data from a specified match.
      produces:
        - application/json
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - vetosides
      responses:
        '200':
          description: Veto side selection from a given match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VetoSideData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /vetosides/:match_id/stream:
    get:
      description: >-
        Get all veto side selection data from a specified match, via an emitter
        for real-time updates.
      produces:
        - text/event-stream
      parameters:
        - name: match_id
          required: true
          schema:
            type: integer
      tags:
        - vetosides
      responses:
        '200':
          description: Veto side selection from a given match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VetoSideData'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
  /vetosides:
    post:
      description: Inserts veto side data for a live match.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VetoSideData'
      tags:
        - vetosides
      responses:
        '200':
          description: Veto side data added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message.
                  id:
                    type: integer
                    description: The inserted veto side.
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoVetoSideData'
        '500':
          $ref: '#/components/responses/Error'
    put:
      description: Updates an existing veto side selection.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VetoSideData'
      tags:
        - vetosides
      responses:
        '200':
          description: Veto side data updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoVetoSideData'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      description: Deletes veto sides associated with a match.
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                match_id:
                  type: integer
                  description: Match ID
                  required: true
      tags:
        - vetosides
      responses:
        '200':
          description: Veto deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          $ref: '#/components/responses/NoVetoSideData'
        '500':
          $ref: '#/components/responses/Error'
components:
  schemas:
    SimpleResponse:
      type: object
      properties:
        message:
          type: string
    NewMap:
      type: object
      properties:
        id:
          type: integer
          description: System identifier of a map.
        steam_id:
          type: string
          description: Foreign Key User ID.
        map_name:
          type: string
          description: The technical name of the map. This usually starts with de_.
        map_display_name:
          type: string
          description: The display name that a user wishes to show.
        enabled:
          type: boolean
          description: Value representing whether the map is used or not. Defaults to true,
        inserted_at:
          type: string
          format: date-time
          description: Timestamp of when a new map was inserted.
    Maps:
      allOf:
        - $ref: '#/components/schemas/NewMap'
        - type: object
          properties:
            id:
              type: integer
    MapStatsData:
      type: object
      required:
        - map_stats_id
        - match_id
        - map_number
        - start_time
      properties:
        map_stats_id:
          type: integer
          description: The unique identifier of map stats for a match.
        match_id:
          type: integer
          description: Foreign key ID that links back to the match.
        winner:
          type: integer
          description: Foreign key ID to the team that won.
        map_number:
          type: integer
          description: The current map number in a best-of series.
        team1_score:
          type: integer
          description: The score from team 1.
        team2_score:
          type: integer
          description: The score from team 2.
        start_time:
          type: string
          format: date-time
          description: Start time of a match in date time format.
        end_time:
          type: string
          format: date-time
          description: End time of a match in date time format.
        demoFile:
          type: string
          description: The URL pointing to the demo uploaded.
    NewMatch:
      type: object
      required:
        - team1_id
        - team2_id
        - max_maps
        - title
        - skip_veto
      properties:
        match_id:
          type: integer
          description: The integer ID from the database.
        server_id:
          type: integer
          description: >-
            The server ID the match is being designated to. NULL if to be
            provided later.
        team1_id:
          type: integer
          description: The ID of team one.
        team2_id:
          type: integer
          description: The ID of team two.
        season_id:
          type: integer
          description: The ID of the season. NULL if no season.
        start_time:
          type: string
          format: date-time
          description: The starting time of the match.
        end_time:
          type: string
          format: date-time
          description: The ending time of the match.
        winner:
          type: integer
          description: The ID of winner of the match.
        max_maps:
          type: integer
          description: The number of max maps played per series.
        title:
          type: string
          description: The title of the match, default is 'Map {MAPNUMBER} of {MAXMAPS}'.
        skip_veto:
          type: boolean
          description: Boolean value representing whether to skip the veto or not.
        veto_first:
          type: string
          description: The string value team1 or team2 on who gets to veto first.
        veto_mappool:
          type: string
          description: The map pool given by the system. Space separated.
        side_type:
          type: string
          description: Decision on what to do for side types. standard, always_knife, etc.
        plugin_version:
          type: string
          description: The version of the get5 plugin running on the server.
        spectator_auths:
          type: object
          properties:
            key:
              type: string
              description: String reprsentation of a steam64 ID.
          description: JSON array of spectator auths.
        private_match:
          type: boolean
          description: >-
            Boolean value representing whether the match is limited visibility
            to users on the team or who is on map stats. Defaults to false.
        enforce_teams:
          type: boolean
          description: >-
            Boolean value representing whether the server will enforce teams on
            match start. Defaults to true.
        ignore_server:
          type: boolean
          description: Boolean value representing whether to integrate a game server.
        forfeit:
          type: boolean
          description: Whether the match was forfeited or not.
        cancelled:
          type: boolean
          description: Whether or not the match was cancelled.
        team1_score:
          type: integer
          description: The score from team 1 during the series.
        team2_score:
          type: integer
          description: The score from team 2 during the series.
        onsite_veto:
          type: boolean
          description: Flag indicating whether you wish to veto on-site, or in-game.
        is_pug:
          type: boolean
          description: >-
            Flag that indicates whether teams are required or not and to keep
            track of stats for pug/non-pug games.
        match_cvars:
          type: object
          description: >-
            An object of key-value pairs containing different unique match
            CVARs.
        wingman:
          type: boolean
          description: Flag indicating whether the gamemode is wingman or not.
    MatchConfig:
      type: object
      properties:
        matchid:
          type: integer
          description: Identifier for the match.
        match_title:
          type: string
          description: Title of the match.
        side_type:
          type: string
          description: Idenitifer for how sides are determined.
        veto_first:
          type: string
          description: Whether team1 or team2 gets the first veto.
        skip_veto:
          type: integer
          description: Integer representing a boolean if to skip vetoes or not.
        min_players_to_ready:
          type: integer
          description: The amount of players on a team required to ready up.
        players_per_team:
          type: integer
          description: The amount of players per team.
        team1:
          $ref: '#/components/schemas/TeamObject'
        team2:
          $ref: '#/components/schemas/TeamObject'
        cvars:
          type: object
          description: Any additional cvars sent to the server.
        spectators:
          type: object
          description: >-
            Key value pair objects containing steamID64 as key, and nicknames as
            values.
        maplist:
          type: object
          minProperties: 1
          maxProperties: 7
          description: >-
            Key value pair containing an integer representing map order, and
            value representing map name.
        min_spectators_to_ready:
          type: integer
          description: Value representing spectators to ready up.
        maps_to_win:
          type: integer
          description: The amount of maps required to win a match.
        map_sides:
          type: string
          description: >-
            Determines the starting sides for each map. If this array is shorter
            than num_maps, side_type will determine the side-behavior of the
            remaining maps. Ignored if skip_veto is false.
    MatchPauseObject:
      type: object
      properties:
        id:
          type: integer
          description: The internal database primary key for match pausing.
        match_id:
          type: integer
          description: Foreign key to match table.
        pause_type:
          type: string
          description: The type of pause last called.
        team_paused:
          type: string
          description: The team which last called a pause.
        paused:
          type: boolean
          description: >-
            Whether the match is currently paused or not with the given previous
            values.
    TeamObject:
      type: object
      properties:
        name:
          type: string
          description: Name of the team.
        tag:
          type: string
          description: Shorthand tag for the team.
        players:
          type: object
          properties:
            steamid:
              type: string
              description: The key is the Steam64 ID.
            nickname:
              type: string
              description: The value is a preferred nickname if present.
    MatchData:
      type: object
      properties:
        id:
          type: integer
          description: The integer ID from the database.
        user_id:
          type: integer
          description: The ID of the user that created the match.
        server_id:
          type: integer
          description: The ID of the selected server to play on the match.
        team1_id:
          type: integer
          description: The ID of team one.
        team2_id:
          type: integer
          description: The ID of team two.
        winner:
          type: integer
          description: The foreign key of a team that won the match.
        team1_score:
          type: integer
          description: The score of team 1.
        team2_score:
          type: integer
          description: The score of team 2.
        team1_string:
          type: string
          description: The current name of team 1 in the match.
        team2_string:
          type: string
          description: The current name of team 2 in the match.
        cancelled:
          type: boolean
          description: Whether a match was cancelled or not.
        forfeit:
          type: boolean
          description: Whether the match was forfeit or not.
        start_time:
          type: string
          format: date-time
          description: The starting time of the match.
        end_time:
          type: string
          format: date-time
          description: The ending time of the match.
        max_maps:
          type: integer
          description: The number of max maps played per series.
        title:
          type: string
          description: The title of the match, default is 'Map {MAPNUMBER} of {MAXMAPS}'.
        skip_veto:
          type: boolean
          description: Boolean value representing whether to skip the veto or not.
        private_match:
          type: boolean
          description: >-
            Boolean value representing whether the match is limited visibility
            to users on the team or who is on map stats. Defaults to false.
        enforce_teams:
          type: boolean
          description: >-
            Boolean value representing whether the server will enforce teams on
            match start. Defaults to true.
        min_player_ready:
          type: integer
          description: The minimum players required to ready up per team.
        season_id:
          type: integer
          description: The ID of the season. NULL if no season.
    BombInfo:
      type: object
      properties:
        id:
          type: integer
          description: The integer ID from the database.
        match_id:
          type: integer
          description: The match ID that the bomb was defused or planted.
        map_id:
          type: integer
          description: The current Map ID that the bomb was planted/defused.
        player_name:
          type: string
          description: The name of the player that planted/defused the bomb.
        round_number:
          type: integer
          description: The round number where the bomb was planted/defused.
        round_time:
          type: integer
          description: The time in ms during the round that the bomb was planted/defused.
        site:
          type: string
          description: The site the bomb was planted/defused.
        defused:
          type: boolean
          description: Whether the bomb was planted or defused.
    PlayerStatsExtras:
      type: object
      required:
        - match_id
        - map_id
        - team_id
        - steam_id
        - name
      properties:
        player_steam_id:
          type: string
          description: The Steam64 identifier of the player killed.
        player_name:
          type: string
          description: The name of the player being killed on the server.
        player_side:
          type: string
          description: The side the player killed is on.
        match_id:
          type: integer
          description: Match identifier in the system.
        map_id:
          type: integer
          description: Integer determining the current map of the match.
        team_id:
          type: integer
          description: Integer determining the team a player is on.
        round_number:
          type: integer
          description: Integer determining the round that the player death occurred on.
        round_time:
          type: integer
          description: >-
            Integer determining the round time that the player death occurred
            on.
        attacker_steam_id:
          type: string
          description: >-
            The Steam64 identifier of the player who attacked the player who had
            died.
        attacker_name:
          type: string
          description: The name of the player attacking the killed player on the server.
        attacker_side:
          type: string
          description: The side the attacker is on.
        weapon:
          type: string
          description: The name of the weapon that the player died from.
        bomb:
          type: boolean
          description: Whether the player died from the bomb or not.
        headshot:
          type: boolean
          description: Whether the player died from a headshot.
        thru_smoke:
          type: boolean
          description: Whether the player died thru smoke.
        attacker_blind:
          type: boolean
          description: Whether the player was killed by a blind attacker.
        no_scope:
          type: boolean
          description: Whether the player was killed by a no scope.
        suicide:
          type: boolean
          description: Whether the player had killed themselves via suicide.
        friendly_fire:
          type: boolean
          description: Whether the player had died from friendly fire.
        assister_steam_id:
          type: string
          description: The Steam64 identifier of the player who assisted the attacker.
        assister_name:
          type: string
          description: The name of the player assisting the attacker on the server.
        assister_side:
          type: string
          description: The side that the assister is on. If no assister, this is null.
        assist_friendly_fire:
          type: boolean
          description: Indicates if the assist was friendly fire.
        flash_assist:
          type: boolean
          description: Indicates if the assist was via a flashbang.
    PlayerStats:
      type: object
      required:
        - match_id
        - map_id
        - team_id
        - steam_id
        - name
      properties:
        match_id:
          type: integer
          description: Match identifier in the system.
        map_id:
          type: integer
          description: Integer determining the current map of the match.
        team_id:
          type: integer
          description: Integer determining the team a player is on.
        steam_id:
          type: string
          description: String that reprsents a players Steam64 ID.
        name:
          type: string
          description: String determining player's name.
        kills:
          type: integer
          description: Integer representing amount of kills.
        deaths:
          type: integer
          description: Integer representing amount of deaths.
        roundsplayed:
          type: integer
          description: Integer representing amount of roundsplayed.
        assists:
          type: integer
          description: Integer representing amount of assists.
        flashbang_assists:
          type: integer
          description: Integer representing amount of flashbang assists.
        teamkills:
          type: integer
          description: Integer representing amount of team kills.
        knife_kills:
          type: integer
          description: Integer representing amount of knife kills.
        suicides:
          type: integer
          description: Integer representing amount of suicides.
        headshot_kills:
          type: integer
          description: Integer representing amount of headshot kills.
        damage:
          type: integer
          description: Integer representing amount of damage.
        util_damage:
          type: integer
          description: Integer representing amount of damage in utility.
        enemies_flashed:
          type: integer
          description: Integer reprsentation of enemies flashed.
        friendlies_flashed:
          type: integer
          description: Integer reprsentation of teammates flashed.
        bomb_plants:
          type: integer
          description: Integer representing amount of bomb plants.
        bomb_defuses:
          type: integer
          description: Integer representing amount of bomb defuses.
        v1:
          type: integer
          description: Integer representing amount of 1v1s.
        v2:
          type: integer
          description: Integer representing amount of 1v2s.
        v3:
          type: integer
          description: Integer representing amount of 1v3s.
        v4:
          type: integer
          description: Integer representing amount of 1v4s.
        v5:
          type: integer
          description: Integer representing amount of 1v5s.
        k1:
          type: integer
          description: Integer representing amount of 1 kill rounds.
        k2:
          type: integer
          description: Integer representing amount of 2 kill rounds.
        k3:
          type: integer
          description: Integer representing amount of 3 kill rounds.
        k4:
          type: integer
          description: Integer representing amount of 4 kill rounds.
        k5:
          type: integer
          description: Integer representing amount of 5 kill rounds.
        firstdeath_ct:
          type: integer
          description: >-
            Integer representing amount of times a player died as a CT first in
            a round.
        firstdeath_t:
          type: integer
          description: >-
            Integer representing amount of times a player died as a T first in a
            round.
        firstkill_ct:
          type: integer
          description: >-
            Integer representing amount of times a player killed as a CT first
            in a round.
        firstkill_t:
          type: integer
          description: >-
            Integer representing amount of times a player killed as a T first in
            a round.
        kast:
          type: integer
          description: Integer representing the KAST value of a player during the match.
        contribution_score:
          type: integer
          description: Integer representing the contribution score of a player.
        mvp:
          type: integer
          description: Integer representing the amount of MVPs the players had.
    SeasonData:
      type: object
      required:
        - server_id
        - name
        - start_date
      properties:
        server_id:
          type: integer
          description: Unique server ID.
        name:
          type: string
          description: The name of the Season to be created.
        start_date:
          type: string
          format: date-time
          description: Season start date.
        end_date:
          type: string
          format: date-time
          description: Optional season end date.
        season_cvar:
          type: object
          description: Objects for default CVARs when selecting a season.
    cvars:
      type: object
      description: >-
        Key value pairs representing convars for the match server. Key is
        command and value is what to set it to.
    ServerData:
      type: object
      required:
        - server_id
        - ip_string
        - port
        - rcon_password
      properties:
        server_id:
          type: integer
          description: Unique Server ID.
        ip_string:
          type: string
          description: The IP or host name of the server.
        port:
          type: integer
          description: Port of the server.
        display_name:
          type: string
          description: Visible name of the server.
        rcon_password:
          type: string
          description: RCON password of the server.
        public_server:
          type: boolean
          description: Whether a server can be publically used.
        flag:
          type: string
          description: Two character code representing a flag, like teams.
        gotv_port:
          type: integer
          description: The optional GOTV port for a server.
    AuthObject:
      type: object
      properties:
        name:
          type: string
          description: >-
            Name that the user wishes to be called. Can be left null and will
            use Steam name.
        captain:
          type: boolean
          description: Boolean value representing if a user is a team captain or not.
        coach:
          type: boolean
          description: Boolean value representing if a user is a coach for the team or not.
    TeamData:
      type: object
      required:
        - team_id
      properties:
        team_id:
          type: integer
          description: The unique ID of a team.
        name:
          type: string
          description: The name of the team.
          required: true
        flag:
          type: string
          description: >-
            Country code flag used in game. See
            https://steamcommunity.com/sharedfiles/filedetails/?id=719079703
          required: false
        logo:
          type: string
          format: byte
          description: A base64 png or svg to save to disk.
          required: false
        auth_name:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AuthObject'
        tag:
          type: string
          description: A string with a shorthand tag for a team.
          required: false
    NewUser:
      type: object
      properties:
        id:
          type: integer
          description: System identifier of a user.
        steam_id:
          type: string
          description: Steam ID of the user being created
        name:
          type: string
          description: Name gathered from Steam. Can be updated
        admin:
          type: integer
          description: >-
            Integer determining if a user is an admin of the system. Either 1 or
            0.
        super_admin:
          type: integer
          description: >-
            Integer determining if a user is an  admin of the system. Either 1
            or 0.
        small_image:
          type: string
          description: Akamai Steam URL to the small profile image
        medium_image:
          type: string
          description: Akamai Steam URL to the small profile image
        large_image:
          type: string
          description: Akamai Steam URL to the small profile image
        new_api:
          type: boolean
          description: Whether the user is requesting a new API key.
        password:
          type: string
          description: A new password to reset a user.
        old_password:
          type: string
          description: The old password provided by the user to check validity.
        force_reset:
          type: boolean
          description: >-
            If a user requires a force reset/remove password, update the
            password to NULL.
        challonge_api_key:
          type: string
          description: A [challonge API](https://challonge.com/settings/developer) key
    User:
      allOf:
        - $ref: '#/components/schemas/NewUser'
        - type: object
          properties:
            id:
              type: integer
    VetoData:
      type: object
      properties:
        veto_id:
          type: integer
          description: Unique ID of a veto
        match_id:
          type: integer
          description: Foreign key of match associated with vetoes.
        team_name:
          type: string
          description: The name of the team.
        map:
          type: string
          description: The map being picked or banned.
        pick_or_veto:
          type: string
          description: The choice of either pick or ban.
    VetoSideData:
      type: object
      properties:
        veto_side_id:
          type: integer
          description: Unique ID of a veto side.
        match_id:
          type: integer
          description: Foreign key of match associated with vetoes.
        team_name:
          type: string
          description: The name of the team.
        map:
          type: string
          description: The map being picked or banned.
        side:
          type: string
          description: The choice of either CT, T, or none.
  responses:
    BadRequest:
      description: Bad request, information not provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    Error:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    Success:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    MatchAlreadyFinished:
      description: Match already finished.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    NoMapStatData:
      description: Map Stat Data was not provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    MatchFinished:
      description: Match already finished.
      content: null
      application/json:
        schema:
          $ref: '#/components/schemas/SimpleResponse'
    NoMatchData:
      description: No match data provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    MatchInvalidData:
      description: The match data provided is invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    NoPlayerStatData:
      description: No playerstat data was provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    NoSeasonData:
      description: No season data was provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    NoServerData:
      description: No server data was provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    NoTeamData:
      description: No team data was provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    NoVetoData:
      description: No veto data was provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
    NoVetoSideData:
      description: No veto sides data was provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleResponse'
tags: []
