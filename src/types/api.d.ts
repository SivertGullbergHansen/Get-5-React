/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "resourcePath": {
  };
  "description": {
  };
  "/leaderboard/": {
    /** @description Get lifetime leaderboard of teams */
    get: {
      responses: {
        /** @description Leaderboard */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/leaderboard/players": {
    /** @description Get lifetime leaderboard for players */
    get: {
      responses: {
        /** @description Leaderboard */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/leaderboard/players/pug": {
    /** @description Get lifetime leaderboard for players in pickup games. */
    get: {
      responses: {
        /** @description Leaderboard */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/leaderboard/players/:season_id": {
    /** @description Seasonal leaderboard for players */
    get: {
      responses: {
        /** @description Leaderboard */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/leaderboard/:season_id": {
    /** @description Seasonal leaderboard for teams */
    get: {
      responses: {
        /** @description Leaderboard */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/match/:match_id/finish": {
    /** @description Finalizes the match. Called from the G5WS plugin. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The API key given from the game server to compare. */
            key?: number;
            /** @description The string for which team won the match. team1 or team2. */
            winner?: string;
            /** @description Optional if a team has forfeit a match. */
            forfeit?: number;
            /** @description The given match ID from the path. */
            match_id?: number;
          };
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "text/plain": string;
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/match/:match_id/pause": {
    /** @description Updates the database value if a match is paused from in-game. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The API key given from the game server to compare. */
            key?: number;
            /** @description The string for what type of pause has been fired off. */
            pause_type?: string;
            /** @description Which team has paused the game. */
            team_paused?: string;
            /** @description The given match ID from the path. */
            match_id?: number;
          };
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "text/plain": string;
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/match/:match_id/unpause": {
    /** @description Updates the database value if a match is unpaused from in-game. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The API key given from the game server to compare. */
            key?: number;
            /** @description Which team has unpaused the game. */
            team_unpaused?: string;
            /** @description The given match ID from the path. */
            match_id?: number;
          };
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "text/plain": string;
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/match/:match_id/map/:map_number/start": {
    /** @description Begin a map within a match series. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The API key given from the game server to compare. */
            key?: number;
            /** @description The given map number to start. */
            map_number?: number;
            /** @description The given map name to update in the map stats object. */
            mapname?: string;
            /** @description The given match ID from the path. */
            match_id?: number;
          };
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "text/plain": string;
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/match/:match_id/map/:map_number/update": {
    /** @description Update a match with the score. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The API key given from the game server to compare. */
            key?: number;
            /** @description The score for team1. */
            team1_score?: number;
            /** @description The score for team2. */
            team2_score?: number;
            /** @description The given match ID from the path. */
            match_id?: number;
            /** @description The given map number from the URI path. */
            map_number?: number;
          };
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "text/plain": string;
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/match/:match_id/vetoUpdate": {
    /** @description Route serving to update the vetos in the database. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The API key given from the game server to compare. */
            key?: number;
            /** @description The team string consisting of either team1, team2, or nothing. */
            teamString?: string;
            /** @description The map the team has picked or banned. */
            map?: string;
            /** @description The given match ID from the path. */
            match_id?: number;
            /** @description The action taken upon the team. */
            pick_or_veto?: string;
          };
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "text/plain": string;
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/match/:match_id/vetoSideUpdate": {
    /** @description Route serving to update the side selection from vetoes into the database. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The API key given from the game server to compare. */
            key?: number;
            /** @description The team string consisting of either team1, team2, or nothing. */
            teamString?: string;
            /** @description The map the team has picked or banned. */
            map?: string;
            /** @description The given match ID from the path. */
            match_id?: number;
            /** @description Which side the team has chosen. */
            side?: string;
          };
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "text/plain": string;
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/:match_id/map/:map_number/demo": {
    /** @description Route serving to update the demo link per map. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The API key given from the game server to compare. */
            key?: number;
            /** @description The map id of a given match. */
            map_number?: number;
            /** @description The URL for a demo file in string form. */
            demoFile?: string;
            /** @description The given match ID from the path. */
            match_id?: number;
          };
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "text/plain": string;
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/:match_id/map/:map_number/demo/upload/": {
    /** @description Route serving to upload the demo file from the game server. */
    put: {
      parameters: {
        header: {
          key: string;
        };
        path: {
          match_id: number;
          map_number: number;
        };
      };
      requestBody: {
        content: {
          "application/octet-stream": {
            key?: unknown;
          };
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "text/plain": string;
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/match/:match_id/map/:map_number/finish": {
    /** @description Route serving to finish a map within a series. */
    post: {
      requestBody: {
        content: {
          "text/plain": {
            /** @description The API key given from the game server to compare. */
            key?: string;
            /** @description The string representation of the winner, usually team1 or team2. */
            winner?: string;
            /** @description The map id of a given match. */
            map_number?: number;
            /** @description The given match ID from the path. */
            match_id?: number;
          };
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "text/plain": string;
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/match/:match_id/map/:map_number/player/:steam_id/update": {
    /** @description Route serving to update a players stats within a match. */
    post: {
      requestBody: {
        content: {
          "text/plain": components["schemas"]["PlayerStats"];
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "text/plain": string;
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/:match_id/map/:map_number/backup": {
    /** @description Route serving to upload the latest round backup to the server. */
    post: {
      parameters: {
        header: {
          key: string;
        };
        path: {
          match_id: number;
          map_number: number;
          round_number: number;
        };
      };
      requestBody: {
        content: {
          "application/octet-stream": {
            key?: unknown;
          };
        };
      };
      responses: {
        /** @description Success. */
        200: {
          content: {
            "text/plain": string;
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/maps/": {
    /** @description Get all maps from all users. */
    get: {
      responses: {
        /** @description List of maps */
        200: {
          content: {
            "application/json": components["schemas"]["Maps"][];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/maps/:user_id": {
    /** @description Get the maplist of a specific user */
    get: {
      responses: {
        /** @description Get a maplist of a specific user. */
        200: {
          content: {
            "application/json": components["schemas"]["Maps"][];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/maps/:user_id/enabled": {
    /** @description Get the maplist of a specific user that are enabled. */
    get: {
      responses: {
        /** @description Get enabled maps for a user. */
        200: {
          content: {
            "application/json": components["schemas"]["Maps"][];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/maps": {
    /** @description Update a map in the map_list */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewMap"];
        };
      };
      responses: {
        /** @description Map update successful. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        /** @description Nothing to update */
        412: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        500: components["responses"]["Error"];
      };
    };
    /** @description Create map for maplist */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewMap"];
        };
      };
      responses: {
        /** @description Create successful */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Delete a map in the map_list */
    delete: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewMap"];
        };
      };
      responses: {
        /** @description Map update successful. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        /** @description Nothing to update */
        412: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/mapstats/": {
    /** @description Stats for all maps in all matches. */
    get: {
      responses: {
        /** @description Stats for all maps in all matches. */
        200: {
          content: {
            "application/json": components["schemas"]["MapStatsData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/mapstats/:match_id": {
    /** @description Set of map stats from a match */
    get: {
      responses: {
        /** @description Stats for all maps in all matches. */
        200: {
          content: {
            "application/json": components["schemas"]["MapStatsData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/mapstats/:match_id/stream": {
    /** @description Set of map stats from a match provided as an event-stream for real time updates. */
    get: {
      responses: {
        /** @description Stats for all maps in all matches. */
        200: {
          content: {
            "application/json": components["schemas"]["MapStatsData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/mapstats/:match_id/:map_number/stream": {
    /** @description Map statistics for a given match and map number provided as a text/event-stream for real time data info. */
    get: {
      responses: {
        /** @description Stats for a single given map in a match. */
        200: {
          content: {
            "application/json": components["schemas"]["MapStatsData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/mapstats/:match_id/:map_number": {
    /** @description Map statistics for a given match and map number. */
    get: {
      responses: {
        /** @description Stats for a single given map in a match. */
        200: {
          content: {
            "application/json": components["schemas"]["MapStatsData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/mapstats": {
    /** @description Update a map stats object when it is completed */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["MapStatsData"][];
        };
      };
      responses: {
        /** @description Map stats updated successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoMapStatData"];
        422: components["responses"]["MatchAlreadyFinished"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Add map stats for a match */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["MapStatsData"][];
        };
      };
      responses: {
        /** @description Map stats inserted successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        422: components["responses"]["MatchAlreadyFinished"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Delete a map stats object */
    delete: {
      requestBody: {
        content: {
          "application/json": {
            map_stats_id?: number;
          };
        };
      };
      responses: {
        /** @description Mapstat deleted */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoMapStatData"];
        422: components["responses"]["MatchAlreadyFinished"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/": {
    /** @description Get all match data from the application. */
    get: {
      parameters: {
        query?: {
          /** @description Whether to have values in descending order. Defaults to true. */
          asc?: boolean;
        };
      };
      responses: {
        /** @description All matches within the system. */
        200: {
          content: {
            "application/json": components["schemas"]["MatchData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/mymatches": {
    /** @description Set of matches from the logged in user. */
    get: {
      parameters: {
        query?: {
          /** @description Whether to have values in descending order. Defaults to true. */
          asc?: boolean;
        };
      };
      responses: {
        /** @description Matches of logged in user. */
        200: {
          content: {
            "application/json": components["schemas"]["MatchData"][];
          };
        };
        404: components["responses"]["MatchesNotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id": {
    /** @description Returns a provided matches info. */
    get: {
      responses: {
        /** @description Match info */
        200: {
          content: {
            "application/json": {
              match?: components["schemas"]["MatchData"];
            };
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id/stream": {
    /** @description Returns an event stream of a specified matches info. */
    get: {
      responses: {
        /** @description Match info */
        200: {
          content: {
            "application/json": {
              match?: components["schemas"]["MatchData"];
            };
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id/paused/stream": {
    /** @description Get the pause information on a match streamed as a server sent event. */
    get: {
      responses: {
        /** @description Returns information based on a match if it is paused. */
        200: {
          content: {
            "application/json": components["schemas"]["MatchPauseObject"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id/paused": {
    /** @description Get the pause information on a match. */
    get: {
      responses: {
        /** @description Returns information based on a match if it is paused. */
        200: {
          content: {
            "application/json": components["schemas"]["MatchPauseObject"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id/bombs/stream": {
    /** @description Returns an bomb plant/defused event stream of a specified match. */
    get: {
      responses: {
        /** @description Bomb Info from the match. */
        200: {
          content: {
            "application/json": {
              match?: components["schemas"]["BombInfo"];
            };
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id/bombs": {
    /** @description Returns an bomb plant/defused data of a specified match. */
    get: {
      responses: {
        /** @description Bomb Info from the match. */
        200: {
          content: {
            "application/json": {
              match?: components["schemas"]["BombInfo"];
            };
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/limit/:limiter": {
    /** @description Returns most recent matches specified by a limit. */
    get: {
      responses: {
        /** @description Match info */
        200: {
          content: {
            "application/json": components["schemas"]["MatchData"][];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/limit/:firstvalue&:lastvalue": {
    /** @description Returns a subset of matches between a range. */
    get: {
      responses: {
        /** @description Match info */
        200: {
          content: {
            "application/json": components["schemas"]["MatchData"][];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id:/config": {
    /** @description Route serving to get match configs from the database for the plugin. */
    get: {
      responses: {
        /** @description Match config */
        200: {
          content: {
            "application/json": components["schemas"]["MatchConfig"];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches": {
    /** @description Update player stats in a match/map. */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewMatch"][];
        };
      };
      responses: {
        /** @description Update successful. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoMatchData"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Create a new match. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewMatch"][];
        };
      };
      responses: {
        /** @description Create successful */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        403: components["responses"]["Unauthorized"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Delete a match and all values associated if it is cancelled. */
    delete: {
      requestBody: {
        content: {
          "application/json": {
            match_id?: number;
            all_cancelled?: boolean;
          };
        };
      };
      responses: {
        /** @description Match deleted */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id/forfeit/:winner_id": {
    /** @description Forfeits a current match with a given team ID as the winner, if the match is running. */
    get: {
      parameters: {
        path: {
          winner_id: number;
          match_id: number;
        };
      };
      responses: {
        /** @description Match information */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["MatchInvalidData"];
      };
    };
  };
  "/matches/:match_id/cancel": {
    /** @description Cancels the given match, provided it isn't finished and the user has the ability to do so. The user must either own the match or be an admin. */
    get: {
      responses: {
        /** @description Match response. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/matches/:match_id/restart": {
    /** @description Restarts the given match, provided it isn't finished and the user has the ability to do so. The user must either own the match or be an admin. */
    get: {
      responses: {
        /** @description Match response. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/matches/:match_id/rcon": {
    /** @description Sends out an RCON Command to the server, and returns the response if retrieved. Super admins can only use this, as you can retrieve RCON Passwords using this. */
    put: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The rcon command that the user has sent in. */
            rcon_command?: string;
          };
        };
      };
      responses: {
        /** @description Match response. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id/pause": {
    /** @description Sends the sm_pause command to a given match. */
    get: {
      responses: {
        /** @description Match response. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/matches/:match_id/unpause": {
    /** @description Sends the sm_unpause command to a given match. */
    get: {
      responses: {
        /** @description Match response. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/matches/:match_id/adduser": {
    /** @description Sends an add user commamd to a given team. */
    put: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The formatted Steam ID of a user. Can be url, steam64, ID3, vanity URL. */
            steam_id?: string;
            /** @description Either the first or second team in the match, team1 or team2. */
            team_id?: string;
            /** @description Optional nickname for the user being added into the match. */
            nickname?: string;
          };
        };
      };
      responses: {
        /** @description Match response. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id/addcoach": {
    /** @description Sends an add coach commamd to a given team. */
    put: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The formatted Steam ID of a user. Can be url, steam64, ID3, vanity URL. */
            steam_id?: string;
            /** @description Either the first or second team in the match, team1 or team2. */
            team_id?: string;
          };
        };
      };
      responses: {
        /** @description Match response. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id/addspec": {
    /** @description Sends an add player to spectator command. */
    put: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The formatted Steam ID of a user. Can be url, steam64, ID3, vanity URL. */
            user_id?: string;
          };
        };
      };
      responses: {
        /** @description Match response. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id/removeuser": {
    /** @description Sends a get5_removeplayer command to the game server with a given steam ID. */
    put: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The formatted Steam ID of a user. Can be url, steam64, ID3, vanity URL. */
            steam_id?: string;
          };
        };
      };
      responses: {
        /** @description Match response. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id/backup": {
    /** @description Retrieves the name of backups on the game server. */
    get: {
      responses: {
        /** @description Match response. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
    /** @description Runs a backup file on the game server. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Filename of the backup located on the game server. */
            backup_name?: string;
          };
        };
      };
      responses: {
        /** @description Match response. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["MatchInvalidData"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/matches/:match_id/backup/remote": {
    /** @description Retrieves the name of backups available for a match on the API. */
    get: {
      responses: {
        /** @description Match response. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
    /** @description Runs a backup stored on the API remotely to a specified game server, provided it is available. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description The ID of the server that you wish to restore to. */
            server_id?: number;
            /** @description The name of the backup file. This can be retrieved via a GET. */
            backup_file?: string;
          };
        };
      };
      responses: {
        /** @description Match response. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        401: components["responses"]["MatchFinished"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["MatchInvalidData"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstatsextra/extra": {
    /** @description Route serving to get all extra player statistics. */
    get: {
      responses: {
        /** @description Extra Player Stats */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStatsExtras"][];
          };
        };
        400: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstatsextra/:steam_id": {
    /** @description Player stats from a given Steam ID. */
    get: {
      responses: {
        /** @description Player stats from a given user. */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStatsExtras"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstatsextra/:steam_id/pug": {
    /** @description Extra player stats from a given Steam ID involved in PUGs */
    get: {
      responses: {
        /** @description Player stats from a given user. */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStatsExtras"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstatsextra/:steam_id/official": {
    /** @description Extra player stats from a given Steam ID involved in official matches. */
    get: {
      responses: {
        /** @description Player stats from a given user. */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStatsExtras"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstatsextra/:steam_id/season/:season_id": {
    /** @description Extra player stats from a given Steam ID involved in a speciefic season. */
    get: {
      responses: {
        /** @description Player stats from a given user. */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStatsExtras"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstatsextras/match/:match_id": {
    /** @description Extra player stats from a given match in the system. */
    get: {
      responses: {
        /** @description Player stats from a given match. */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStatsExtra"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstatsextras/match/:match_id/stream": {
    /** @description Extra player stats from a given match in the system represented by a text-stream for real time updates. */
    get: {
      responses: {
        /** @description Player stats from a given match. */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStatsExtra"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstatsextras": {
    /** @description Update additional player stats in a match/map. */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PlayerStatsExtra"];
        };
      };
      responses: {
        /** @description Update successful. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoPlayerStatData"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Create extra player stats in a match/map. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PlayerStatsExtra"];
        };
      };
      responses: {
        /** @description Player Stats created successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoPlayerStatData"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Delete all additional player stats object from a match. */
    delete: {
      requestBody: {
        content: {
          "application/json": {
            match_id?: number;
          };
        };
      };
      responses: {
        /** @description Player stat deleted */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoPlayerStatData"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstats/": {
    /** @description Route serving to get all player statistics. */
    get: {
      responses: {
        /** @description Player Stats */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStats"][];
          };
        };
        400: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstats/unique": {
    /** @description Gets a unique player count from the map stats table. */
    get: {
      responses: {
        /** @description Player stats from a given user. */
        200: {
          content: {
            "application/json": number;
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstats/:steam_id": {
    /** @description Player stats from a given Steam ID. */
    get: {
      responses: {
        /** @description Player stats from a given user. */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStats"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstats/:steam_id/pug": {
    /** @description Player stats from a given Steam ID involved in PUGs */
    get: {
      responses: {
        /** @description Player stats from a given user. */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStats"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstats/:steam_id/official": {
    /** @description Player stats from a given Steam ID involved in official matches. */
    get: {
      responses: {
        /** @description Player stats from a given user. */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStats"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstats/:steam_id/season/:season_id": {
    /** @description Player stats from a given Steam ID involved in a speciefic season. */
    get: {
      responses: {
        /** @description Player stats from a given user. */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStats"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstats/match/:match_id": {
    /** @description Player stats from a given match in the system. */
    get: {
      responses: {
        /** @description Player stats from a given match. */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStats"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstats/match/:match_id/stream": {
    /** @description Player stats from a given match in the system represented by a text-stream for real time updates. */
    get: {
      responses: {
        /** @description Player stats from a given match. */
        200: {
          content: {
            "application/json": components["schemas"]["PlayerStats"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstats/:steam_id/recent": {
    /** @description Get a steam ID's recent matches */
    get: {
      responses: {
        /** @description Last five matches from the steam ID provided. */
        200: {
          content: {
            "application/json": components["schemas"]["MatchData"][];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/playerstats": {
    /** @description Update player stats in a match/map. */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PlayerStats"];
        };
      };
      responses: {
        /** @description Update successful. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoPlayerStatData"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Create player stats in a match/map. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PlayerStats"];
        };
      };
      responses: {
        /** @description Player Stats created successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoPlayerStatData"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Delete all player stats object from a match. */
    delete: {
      requestBody: {
        content: {
          "application/json": {
            match_id?: number;
          };
        };
      };
      responses: {
        /** @description Player stat deleted */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoPlayerStatData"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/seasons/": {
    /** @description Get all seasons from the application. */
    get: {
      responses: {
        /** @description All seasons within the system. */
        200: {
          content: {
            "application/json": components["schemas"]["SeasonData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/seasons/myseasons": {
    /** @description Set of seasons from the logged in user. */
    get: {
      responses: {
        /** @description All matches within the system. */
        200: {
          content: {
            "application/json": components["schemas"]["SeasonData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/seasons/myseasons/availble": {
    /** @description Set of seasons from the logged in user that can currently be used. */
    get: {
      responses: {
        /** @description All seasons of a user that are still running. */
        200: {
          content: {
            "application/json": components["schemas"]["SeasonData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/seasons/:season_id/cvar": {
    /** @description Get the default CVARs of a given season ID. */
    get: {
      responses: {
        /** @description All matches within the system. */
        200: {
          content: {
            "application/json": components["schemas"]["cvars"];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/seasons/:season_id": {
    /** @description Set of matches from a season. */
    get: {
      responses: {
        /** @description Season stats */
        200: {
          content: {
            "application/json": components["schemas"]["MatchData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/seasons": {
    /** @description Update a season. */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SeasonData"][];
        };
      };
      responses: {
        /** @description New season inserted successsfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoSeasonData"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Create a new season. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SeasonData"][];
        };
      };
      responses: {
        /** @description New season inserted successsfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Delete a season object. NULLs any linked matches to the season as well. */
    delete: {
      requestBody: {
        content: {
          "application/json": {
            season_id?: number;
          };
        };
      };
      responses: {
        /** @description Season deleted */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/seasons/challonge": {
    /** @description Create a new season from a Challonge Tournament. */
    post: {
      requestBody: {
        content: {
          "application/json": {
              /** @description The tournament ID or URL of the Challonge tournament, as explained in their [API](https://api.challonge.com/v1/documents/tournaments/show). */
              tournament_id?: string;
              /** @description Whether or not to import the teams that are already in the bracket. */
              import_teams?: boolean;
            }[];
        };
      };
      responses: {
        /** @description New season inserted successsfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/servers/": {
    /** @description Get all servers from the application. RCON passwords, too, if an admin. */
    get: {
      responses: {
        /** @description All visible server information */
        200: {
          content: {
            "application/json": components["schemas"]["ServerData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/servers/publiccount": {
    /** @description Get a count of all public servers available. */
    get: {
      responses: {
        /** @description An integrer representing the amount of publically usable servers. */
        200: {
          content: {
            "application/json": number;
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/servers/available": {
    /** @description Get all available servers depending on access level. */
    get: {
      responses: {
        /** @description All visible server information */
        200: {
          content: {
            "application/json": components["schemas"]["ServerData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/servers/myservers": {
    /** @description Set of servers from the logged in user. */
    get: {
      responses: {
        /** @description Server information */
        200: {
          content: {
            "application/json": components["schemas"]["ServerData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/servers/:server_id": {
    /** @description Returns a provided server info. */
    get: {
      responses: {
        /** @description Specific server information */
        200: {
          content: {
            "application/json": {
              server?: components["schemas"]["ServerData"];
            };
          };
        };
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/servers/:server_id:/status": {
    /** @description Returns a provided server status. */
    get: {
      responses: {
        /** @description Server info, if available. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/servers": {
    /** @description Updates an existing server. */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ServerData"][];
        };
      };
      responses: {
        /** @description Server updated successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoServerData"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Creates a new server to use. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ServerData"][];
        };
      };
      responses: {
        /** @description Server created successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Delete a server object. */
    delete: {
      requestBody: {
        content: {
          "application/json": {
            server_id?: number;
          };
        };
      };
      responses: {
        /** @description Server deleted */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/teams/": {
    /** @description Get all teams registered on get5. */
    get: {
      responses: {
        /** @description All teams within the system. */
        200: {
          content: {
            "application/json": components["schemas"]["TeamData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/teams/myteams": {
    /** @description Set of teams from the logged in user. */
    get: {
      responses: {
        /** @description Set of teams from the logged in user within the system. */
        200: {
          content: {
            "application/json": components["schemas"]["TeamData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/teams/:team_id": {
    /** @description Returns a provided teams info. */
    get: {
      responses: {
        /** @description Team info */
        200: {
          content: {
            "application/json": {
              team?: components["schemas"]["TeamData"];
            };
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/teams/:team_id/basic": {
    /** @description Returns a provided teams top-level info, no team names/steamid returned.. */
    get: {
      responses: {
        /** @description Team info */
        200: {
          content: {
            "application/json": {
              team?: components["schemas"]["TeamData"];
            };
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/teams": {
    /** @description Creates a new team to use. */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["TeamData"][];
        };
      };
      responses: {
        /** @description Team updated successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoTeamData"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Creates a new team to use. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["TeamData"][];
        };
      };
      responses: {
        /** @description Team created successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        500: components["responses"]["Error"];
      };
    };
    /** @description Delete a team object if there is no map stats associated with it. Optionally deletes a team member from a team, if a steam ID is provided. */
    delete: {
      requestBody: {
        content: {
          "application/json": {
            team_id?: number;
            steam_id?: string;
          };
        };
      };
      responses: {
        /** @description Team deleted */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/teams/:team_id/recent": {
    /** @description Returns last five recent matches by the team. */
    get: {
      responses: {
        /** @description Last five matches from the team. */
        200: {
          content: {
            "application/json": components["schemas"]["MatchData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/teams/:team_id/result/:match_id": {
    /** @description Get the string result of a match that the team played. */
    get: {
      responses: {
        /** @description String representation */
        200: {
          content: {
            "application/json": {
              /** @description Whether a team won, lost, or tied. */
              result?: string;
            };
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/teams/challonge": {
    /** @description Bulk create blank teams from a Challonge bracket. */
    post: {
      requestBody: {
        content: {
          "application/json": {
              /** @description The tournament ID or URL of the Challonge tournament, as explained in their [API](https://api.challonge.com/v1/documents/participants/index). */
              tournament_id?: string;
            }[];
        };
      };
      responses: {
        /** @description Teams created successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/users/": {
    /** @description Get all users */
    get: {
      responses: {
        /** @description List of users */
        200: {
          content: {
            "application/json": components["schemas"]["NewUser"][];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/users/:user_id": {
    /** @description Get specific user */
    get: {
      responses: {
        /** @description Get a specific user. */
        200: {
          content: {
            "application/json": {
              user?: components["schemas"]["NewUser"];
            };
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/users": {
    /** @description Update a user */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewUser"];
        };
      };
      responses: {
        /** @description User update successful. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        403: components["responses"]["Unauthorized"];
        /** @description Nothing to update */
        412: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        500: components["responses"]["Error"];
      };
    };
    /** @description Create user */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewUser"];
        };
      };
      responses: {
        /** @description Create successful */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        403: components["responses"]["Unauthorized"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/users/:user_id/steam": {
    /** @description get a users' steam URL */
    get: {
      responses: {
        /** @description Update successful */
        200: {
          content: {
            "application/json": {
              url?: string;
            };
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/users/:user_id/recent": {
    /** @description Get a users' recent matches */
    get: {
      responses: {
        /** @description Last five matches from the user. */
        200: {
          content: {
            "application/json": components["schemas"]["MatchData"][];
          };
        };
        500: components["responses"]["Error"];
      };
    };
  };
  "/v2": {
    /** @description Retrieves all logged calls from the game server and operates on them as needed, based on the event. Please see [events and forwards](http://splewis.github.io/get5/latest/events.html#tag/All-Events/paths/Get_OnEvent/post) From the get5 documentation to see what data is required for each event. Typings can also be found in the repository. */
    post: {
      responses: {
        /** @description Success. */
        200: {
          content: {
            "text/plain": string;
          };
        };
        401: components["responses"]["Error"];
      };
    };
  };
  "/v2/backup": {
    /** @description Retrieves the backups from the game servers and stores them in the application. */
    post: {
      parameters: {
        header: {
          /** @description Name of the backup file coming from the game server. */
          "Get5-FileName": string;
          /** @description Zero-indexed map number in the series. */
          "Get5-MapNumber": string;
          /** @description Zero-indexed map number in the series, if the match is not live it is -1. */
          "Get5-RoundNumber": string;
          /** @description The API key provided by the server. */
          Authorization: string;
          /** @description The ID of the match. */
          "Get5-MatchId": string;
        };
      };
      requestBody?: {
        content: {
          "application/octet-stream": unknown;
        };
      };
      responses: {
        200: components["responses"]["Success"];
        401: components["responses"]["Unauthorized"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/v2/demo": {
    /** @description Retrieves the demos from the given match and map, zips and stores them on the server. */
    post: {
      parameters: {
        header: {
          /** @description Name of the file as defined by get5_demo_name_format */
          "Get5-FileName": string;
          /** @description Zero-indexed map number in the series. */
          "Get5-MapNumber": string;
          /** @description The API key provided by the server. */
          Authorization: string;
          /** @description The ID of the match. */
          "Get5-MatchId": string;
        };
      };
      requestBody?: {
        content: {
          "application/octet-stream": unknown;
        };
      };
      responses: {
        200: components["responses"]["Success"];
        401: components["responses"]["Unauthorized"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/vetoes/": {
    /** @description Get all veto data from the application. */
    get: {
      responses: {
        /** @description All match vetoes within the system. */
        200: {
          content: {
            "application/json": components["schemas"]["VetoData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/vetoes/:match_id": {
    /** @description Get all veto data from a specified match. */
    get: {
      responses: {
        /** @description All vetoes from a given match. */
        200: {
          content: {
            "application/json": components["schemas"]["VetoData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/vetoes/:match_id/stream": {
    /** @description Get all veto pick/ban data from a specified match, via an emitter for real-time updates. */
    get: {
      responses: {
        /** @description Veto data from a given match. */
        200: {
          content: {
            "application/json": components["schemas"]["VetoData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/vetoes": {
    /** @description Updates an existing veto. */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["VetoData"][];
        };
      };
      responses: {
        /** @description Veto deleted successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoVetoData"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Insert a new veto for a match. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["VetoData"][];
        };
      };
      responses: {
        /** @description Veto added successfully. */
        200: {
          content: {
            "application/json": {
              /** @description Success message. */
              message?: string;
              /** @description The inserted veto. */
              id?: number;
            };
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoVetoData"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Deletes vetoes associated with a match. */
    delete: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Match ID */
            match_id?: number;
          };
        };
      };
      responses: {
        /** @description Veto deleted successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoVetoData"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/vetosides/": {
    /** @description Get all veto side selection data from the application. */
    get: {
      responses: {
        /** @description All match veto sides within the system. */
        200: {
          content: {
            "application/json": components["schemas"]["VetoSideData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/vetosides/:match_id": {
    /** @description Get all veto side selection data from a specified match. */
    get: {
      responses: {
        /** @description Veto side selection from a given match. */
        200: {
          content: {
            "application/json": components["schemas"]["VetoSideData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/vetosides/:match_id/stream": {
    /** @description Get all veto side selection data from a specified match, via an emitter for real-time updates. */
    get: {
      responses: {
        /** @description Veto side selection from a given match. */
        200: {
          content: {
            "application/json": components["schemas"]["VetoSideData"][];
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["Error"];
      };
    };
  };
  "/vetosides": {
    /** @description Updates an existing veto side selection. */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["VetoSideData"][];
        };
      };
      responses: {
        /** @description Veto side data updated successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoVetoSideData"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Inserts veto side data for a live match. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["VetoSideData"][];
        };
      };
      responses: {
        /** @description Veto side data added successfully. */
        200: {
          content: {
            "application/json": {
              /** @description Success message. */
              message?: string;
              /** @description The inserted veto side. */
              id?: number;
            };
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoVetoSideData"];
        500: components["responses"]["Error"];
      };
    };
    /** @description Deletes veto sides associated with a match. */
    delete: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Match ID */
            match_id?: number;
          };
        };
      };
      responses: {
        /** @description Veto deleted successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["SimpleResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        403: components["responses"]["Unauthorized"];
        404: components["responses"]["NotFound"];
        412: components["responses"]["NoVetoSideData"];
        500: components["responses"]["Error"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SimpleResponse: {
      message?: string;
    };
    NewMap: {
      /** @description System identifier of a map. */
      id?: number;
      /** @description Foreign Key User ID. */
      steam_id?: string;
      /** @description The technical name of the map. This usually starts with de_. */
      map_name?: string;
      /** @description The display name that a user wishes to show. */
      map_display_name?: string;
      /** @description Value representing whether the map is used or not. Defaults to true, */
      enabled?: boolean;
      /**
       * Format: date-time
       * @description Timestamp of when a new map was inserted.
       */
      inserted_at?: string;
    };
    Maps: components["schemas"]["NewMap"] & {
      id?: number;
    };
    MapStatsData: {
      /** @description The unique identifier of map stats for a match. */
      map_stats_id: number;
      /** @description Foreign key ID that links back to the match. */
      match_id: number;
      /** @description Foreign key ID to the team that won. */
      winner?: number;
      /** @description The current map number in a best-of series. */
      map_number: number;
      /** @description The score from team 1. */
      team1_score?: number;
      /** @description The score from team 2. */
      team2_score?: number;
      /**
       * Format: date-time
       * @description Start time of a match in date time format.
       */
      start_time: string;
      /**
       * Format: date-time
       * @description End time of a match in date time format.
       */
      end_time?: string;
      /** @description The URL pointing to the demo uploaded. */
      demoFile?: string;
    };
    NewMatch: {
      /** @description The integer ID from the database. */
      match_id?: number;
      /** @description The server ID the match is being designated to. NULL if to be provided later. */
      server_id?: number;
      /** @description The ID of team one. */
      team1_id: number;
      /** @description The ID of team two. */
      team2_id: number;
      /** @description The ID of the season. NULL if no season. */
      season_id?: number;
      /**
       * Format: date-time
       * @description The starting time of the match.
       */
      start_time?: string;
      /**
       * Format: date-time
       * @description The ending time of the match.
       */
      end_time?: string;
      /** @description The ID of winner of the match. */
      winner?: number;
      /** @description The number of max maps played per series. */
      max_maps: number;
      /** @description The title of the match, default is 'Map {MAPNUMBER} of {MAXMAPS}'. */
      title: string;
      /** @description Boolean value representing whether to skip the veto or not. */
      skip_veto: boolean;
      /** @description The string value team1 or team2 on who gets to veto first. */
      veto_first?: string;
      /** @description The map pool given by the system. Space separated. */
      veto_mappool?: string;
      /** @description Decision on what to do for side types. standard, always_knife, etc. */
      side_type?: string;
      /** @description The version of the get5 plugin running on the server. */
      plugin_version?: string;
      /** @description JSON array of spectator auths. */
      spectator_auths?: {
        /** @description String reprsentation of a steam64 ID. */
        key?: string;
      };
      /** @description Boolean value representing whether the match is limited visibility to users on the team or who is on map stats. Defaults to false. */
      private_match?: boolean;
      /** @description Boolean value representing whether the server will enforce teams on match start. Defaults to true. */
      enforce_teams?: boolean;
      /** @description Boolean value representing whether to integrate a game server. */
      ignore_server?: boolean;
      /** @description Whether the match was forfeited or not. */
      forfeit?: boolean;
      /** @description Whether or not the match was cancelled. */
      cancelled?: boolean;
      /** @description The score from team 1 during the series. */
      team1_score?: number;
      /** @description The score from team 2 during the series. */
      team2_score?: number;
      /** @description Flag indicating whether you wish to veto on-site, or in-game. */
      onsite_veto?: boolean;
      /** @description Flag that indicates whether teams are required or not and to keep track of stats for pug/non-pug games. */
      is_pug?: boolean;
      /** @description An object of key-value pairs containing different unique match CVARs. */
      match_cvars?: Record<string, never>;
      /** @description Flag indicating whether the gamemode is wingman or not. */
      wingman?: boolean;
    };
    MatchConfig: {
      /** @description Identifier for the match. */
      matchid?: number;
      /** @description Title of the match. */
      match_title?: string;
      /** @description Idenitifer for how sides are determined. */
      side_type?: string;
      /** @description Whether team1 or team2 gets the first veto. */
      veto_first?: string;
      /** @description Integer representing a boolean if to skip vetoes or not. */
      skip_veto?: number;
      /** @description The amount of players on a team required to ready up. */
      min_players_to_ready?: number;
      /** @description The amount of players per team. */
      players_per_team?: number;
      team1?: components["schemas"]["TeamObject"];
      team2?: components["schemas"]["TeamObject"];
      /** @description Any additional cvars sent to the server. */
      cvars?: Record<string, never>;
      /** @description Key value pair objects containing steamID64 as key, and nicknames as values. */
      spectators?: Record<string, never>;
      /** @description Key value pair containing an integer representing map order, and value representing map name. */
      maplist?: Record<string, never>;
      /** @description Value representing spectators to ready up. */
      min_spectators_to_ready?: number;
      /** @description The amount of maps required to win a match. */
      maps_to_win?: number;
      /** @description Determines the starting sides for each map. If this array is shorter than num_maps, side_type will determine the side-behavior of the remaining maps. Ignored if skip_veto is false. */
      map_sides?: string;
    };
    MatchPauseObject: {
      /** @description The internal database primary key for match pausing. */
      id?: number;
      /** @description Foreign key to match table. */
      match_id?: number;
      /** @description The type of pause last called. */
      pause_type?: string;
      /** @description The team which last called a pause. */
      team_paused?: string;
      /** @description Whether the match is currently paused or not with the given previous values. */
      paused?: boolean;
    };
    TeamObject: {
      /** @description Name of the team. */
      name?: string;
      /** @description Shorthand tag for the team. */
      tag?: string;
      players?: {
        /** @description The key is the Steam64 ID. */
        steamid?: string;
        /** @description The value is a preferred nickname if present. */
        nickname?: string;
      };
    };
    MatchData: {
      /** @description The integer ID from the database. */
      id?: number;
      /** @description The ID of the user that created the match. */
      user_id?: number;
      /** @description The ID of the selected server to play on the match. */
      server_id?: number;
      /** @description The ID of team one. */
      team1_id?: number;
      /** @description The ID of team two. */
      team2_id?: number;
      /** @description The foreign key of a team that won the match. */
      winner?: number;
      /** @description The score of team 1. */
      team1_score?: number;
      /** @description The score of team 2. */
      team2_score?: number;
      /** @description The current name of team 1 in the match. */
      team1_string?: string;
      /** @description The current name of team 2 in the match. */
      team2_string?: string;
      /** @description Whether a match was cancelled or not. */
      cancelled?: boolean;
      /** @description Whether the match was forfeit or not. */
      forfeit?: boolean;
      /**
       * Format: date-time
       * @description The starting time of the match.
       */
      start_time?: string;
      /**
       * Format: date-time
       * @description The ending time of the match.
       */
      end_time?: string;
      /** @description The number of max maps played per series. */
      max_maps?: number;
      /** @description The title of the match, default is 'Map {MAPNUMBER} of {MAXMAPS}'. */
      title?: string;
      /** @description Boolean value representing whether to skip the veto or not. */
      skip_veto?: boolean;
      /** @description Boolean value representing whether the match is limited visibility to users on the team or who is on map stats. Defaults to false. */
      private_match?: boolean;
      /** @description Boolean value representing whether the server will enforce teams on match start. Defaults to true. */
      enforce_teams?: boolean;
      /** @description The minimum players required to ready up per team. */
      min_player_ready?: number;
      /** @description The ID of the season. NULL if no season. */
      season_id?: number;
    };
    BombInfo: {
      /** @description The integer ID from the database. */
      id?: number;
      /** @description The match ID that the bomb was defused or planted. */
      match_id?: number;
      /** @description The current Map ID that the bomb was planted/defused. */
      map_id?: number;
      /** @description The name of the player that planted/defused the bomb. */
      player_name?: string;
      /** @description The round number where the bomb was planted/defused. */
      round_number?: number;
      /** @description The time in ms during the round that the bomb was planted/defused. */
      round_time?: number;
      /** @description The site the bomb was planted/defused. */
      site?: string;
      /** @description Whether the bomb was planted or defused. */
      defused?: boolean;
    };
    PlayerStatsExtras: {
      /** @description The Steam64 identifier of the player killed. */
      player_steam_id?: string;
      /** @description The name of the player being killed on the server. */
      player_name?: string;
      /** @description The side the player killed is on. */
      player_side?: string;
      /** @description Match identifier in the system. */
      match_id: number;
      /** @description Integer determining the current map of the match. */
      map_id: number;
      /** @description Integer determining the team a player is on. */
      team_id: number;
      /** @description Integer determining the round that the player death occurred on. */
      round_number?: number;
      /** @description Integer determining the round time that the player death occurred on. */
      round_time?: number;
      /** @description The Steam64 identifier of the player who attacked the player who had died. */
      attacker_steam_id?: string;
      /** @description The name of the player attacking the killed player on the server. */
      attacker_name?: string;
      /** @description The side the attacker is on. */
      attacker_side?: string;
      /** @description The name of the weapon that the player died from. */
      weapon?: string;
      /** @description Whether the player died from the bomb or not. */
      bomb?: boolean;
      /** @description Whether the player died from a headshot. */
      headshot?: boolean;
      /** @description Whether the player died thru smoke. */
      thru_smoke?: boolean;
      /** @description Whether the player was killed by a blind attacker. */
      attacker_blind?: boolean;
      /** @description Whether the player was killed by a no scope. */
      no_scope?: boolean;
      /** @description Whether the player had killed themselves via suicide. */
      suicide?: boolean;
      /** @description Whether the player had died from friendly fire. */
      friendly_fire?: boolean;
      /** @description The Steam64 identifier of the player who assisted the attacker. */
      assister_steam_id?: string;
      /** @description The name of the player assisting the attacker on the server. */
      assister_name?: string;
      /** @description The side that the assister is on. If no assister, this is null. */
      assister_side?: string;
      /** @description Indicates if the assist was friendly fire. */
      assist_friendly_fire?: boolean;
      /** @description Indicates if the assist was via a flashbang. */
      flash_assist?: boolean;
    };
    PlayerStats: {
      /** @description Match identifier in the system. */
      match_id: number;
      /** @description Integer determining the current map of the match. */
      map_id: number;
      /** @description Integer determining the team a player is on. */
      team_id: number;
      /** @description String that reprsents a players Steam64 ID. */
      steam_id: string;
      /** @description String determining player's name. */
      name: string;
      /** @description Integer representing amount of kills. */
      kills?: number;
      /** @description Integer representing amount of deaths. */
      deaths?: number;
      /** @description Integer representing amount of roundsplayed. */
      roundsplayed?: number;
      /** @description Integer representing amount of assists. */
      assists?: number;
      /** @description Integer representing amount of flashbang assists. */
      flashbang_assists?: number;
      /** @description Integer representing amount of team kills. */
      teamkills?: number;
      /** @description Integer representing amount of knife kills. */
      knife_kills?: number;
      /** @description Integer representing amount of suicides. */
      suicides?: number;
      /** @description Integer representing amount of headshot kills. */
      headshot_kills?: number;
      /** @description Integer representing amount of damage. */
      damage?: number;
      /** @description Integer representing amount of damage in utility. */
      util_damage?: number;
      /** @description Integer reprsentation of enemies flashed. */
      enemies_flashed?: number;
      /** @description Integer reprsentation of teammates flashed. */
      friendlies_flashed?: number;
      /** @description Integer representing amount of bomb plants. */
      bomb_plants?: number;
      /** @description Integer representing amount of bomb defuses. */
      bomb_defuses?: number;
      /** @description Integer representing amount of 1v1s. */
      v1?: number;
      /** @description Integer representing amount of 1v2s. */
      v2?: number;
      /** @description Integer representing amount of 1v3s. */
      v3?: number;
      /** @description Integer representing amount of 1v4s. */
      v4?: number;
      /** @description Integer representing amount of 1v5s. */
      v5?: number;
      /** @description Integer representing amount of 1 kill rounds. */
      k1?: number;
      /** @description Integer representing amount of 2 kill rounds. */
      k2?: number;
      /** @description Integer representing amount of 3 kill rounds. */
      k3?: number;
      /** @description Integer representing amount of 4 kill rounds. */
      k4?: number;
      /** @description Integer representing amount of 5 kill rounds. */
      k5?: number;
      /** @description Integer representing amount of times a player died as a CT first in a round. */
      firstdeath_ct?: number;
      /** @description Integer representing amount of times a player died as a T first in a round. */
      firstdeath_t?: number;
      /** @description Integer representing amount of times a player killed as a CT first in a round. */
      firstkill_ct?: number;
      /** @description Integer representing amount of times a player killed as a T first in a round. */
      firstkill_t?: number;
      /** @description Integer representing the KAST value of a player during the match. */
      kast?: number;
      /** @description Integer representing the contribution score of a player. */
      contribution_score?: number;
      /** @description Integer representing the amount of MVPs the players had. */
      mvp?: number;
    };
    SeasonData: {
      /** @description Unique server ID. */
      server_id: number;
      /** @description The name of the Season to be created. */
      name: string;
      /**
       * Format: date-time
       * @description Season start date.
       */
      start_date: string;
      /**
       * Format: date-time
       * @description Optional season end date.
       */
      end_date?: string;
      /** @description Objects for default CVARs when selecting a season. */
      season_cvar?: Record<string, never>;
    };
    /** @description Key value pairs representing convars for the match server. Key is command and value is what to set it to. */
    cvars: Record<string, never>;
    ServerData: {
      /** @description Unique Server ID. */
      server_id: number;
      /** @description The IP or host name of the server. */
      ip_string: string;
      /** @description Port of the server. */
      port: number;
      /** @description Visible name of the server. */
      display_name?: string;
      /** @description RCON password of the server. */
      rcon_password: string;
      /** @description Whether a server can be publically used. */
      public_server?: boolean;
      /** @description Two character code representing a flag, like teams. */
      flag?: string;
      /** @description The optional GOTV port for a server. */
      gotv_port?: number;
    };
    AuthObject: {
      /** @description Name that the user wishes to be called. Can be left null and will use Steam name. */
      name?: string;
      /** @description Boolean value representing if a user is a team captain or not. */
      captain?: boolean;
      /** @description Boolean value representing if a user is a coach for the team or not. */
      coach?: boolean;
    };
    TeamData: {
      /** @description The unique ID of a team. */
      team_id: number;
      /** @description The name of the team. */
      name?: string;
      /** @description Country code flag used in game. See https://steamcommunity.com/sharedfiles/filedetails/?id=719079703 */
      flag?: string;
      /**
       * Format: byte
       * @description A base64 png or svg to save to disk.
       */
      logo?: string;
      auth_name?: {
        [key: string]: components["schemas"]["AuthObject"];
      };
      /** @description A string with a shorthand tag for a team. */
      tag?: string;
    };
    NewUser: {
      /** @description System identifier of a user. */
      id?: number;
      /** @description Steam ID of the user being created */
      steam_id?: string;
      /** @description Name gathered from Steam. Can be updated */
      name?: string;
      /** @description Integer determining if a user is an admin of the system. Either 1 or 0. */
      admin?: number;
      /** @description Integer determining if a user is an  admin of the system. Either 1 or 0. */
      super_admin?: number;
      /** @description Akamai Steam URL to the small profile image */
      small_image?: string;
      /** @description Akamai Steam URL to the small profile image */
      medium_image?: string;
      /** @description Akamai Steam URL to the small profile image */
      large_image?: string;
      /** @description Whether the user is requesting a new API key. */
      new_api?: boolean;
      /** @description A new password to reset a user. */
      password?: string;
      /** @description The old password provided by the user to check validity. */
      old_password?: string;
      /** @description If a user requires a force reset/remove password, update the password to NULL. */
      force_reset?: boolean;
      /** @description A [challonge API](https://challonge.com/settings/developer) key */
      challonge_api_key?: string;
    };
    User: components["schemas"]["NewUser"] & {
      id?: number;
    };
    VetoData: {
      /** @description Unique ID of a veto */
      veto_id?: number;
      /** @description Foreign key of match associated with vetoes. */
      match_id?: number;
      /** @description The name of the team. */
      team_name?: string;
      /** @description The map being picked or banned. */
      map?: string;
      /** @description The choice of either pick or ban. */
      pick_or_veto?: string;
    };
    VetoSideData: {
      /** @description Unique ID of a veto side. */
      veto_side_id?: number;
      /** @description Foreign key of match associated with vetoes. */
      match_id?: number;
      /** @description The name of the team. */
      team_name?: string;
      /** @description The map being picked or banned. */
      map?: string;
      /** @description The choice of either CT, T, or none. */
      side?: string;
    };
  };
  responses: {
    /** @description Bad request, information not provided. */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description The specified resource was not found. */
    NotFound: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description Unauthorized. */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description Error */
    Error: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description Success */
    Success: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description Match already finished. */
    MatchAlreadyFinished: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description Map Stat Data was not provided. */
    NoMapStatData: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description Match already finished. */
    MatchFinished: {
      content: never;
    };
    /** @description No match data provided. */
    NoMatchData: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description The match data provided is invalid. */
    MatchInvalidData: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description No playerstat data was provided. */
    NoPlayerStatData: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description No season data was provided. */
    NoSeasonData: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description No server data was provided. */
    NoServerData: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description No team data was provided. */
    NoTeamData: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description No veto data was provided. */
    NoVetoData: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
    /** @description No veto sides data was provided. */
    NoVetoSideData: {
      content: {
        "application/json": components["schemas"]["SimpleResponse"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
